(this.webpackJsonp=this.webpackJsonp||[]).push([[69],{50:function(n,t,e){"use strict";e.r(t),t.default='module static;\n\nop ==(int, int) -> bool;\nop !=(int, int) -> bool;\nop >(int, int) -> bool;\nop >=(int, int) -> bool;\nop <(int, int) -> bool;\nop <=(int, int) -> bool;\nop &(int, int) -> int;\nop |(int, int) -> int;\nop ^(int, int) -> int;\nop ..(int, int) -> Range<int>;\nop ..=(int, int) -> RangeInclusive<int>;\n\nop ==(bool, bool) -> bool;\nop !=(bool, bool) -> bool;\nop >(bool, bool) -> bool;\nop >=(bool, bool) -> bool;\nop <(bool, bool) -> bool;\nop <=(bool, bool) -> bool;\nop &(bool, bool) -> bool;\nop |(bool, bool) -> bool;\nop ^(bool, bool) -> bool;\n\nop ==((), ()) -> bool;\nop !=((), ()) -> bool;\nop >((), ()) -> bool;\nop >=((), ()) -> bool;\nop <((), ()) -> bool;\nop <=((), ()) -> bool;\n\nop +(int, int) -> int;\nop -(int, int) -> int;\nop *(int, int) -> int;\nop /(int, int) -> int;\nop %(int, int) -> int;\nop **(int, int) -> int;\nop >>(int, int) -> int;\nop <<(int, int) -> int;\n\nop +(float, float) -> float;\nop -(float, float) -> float;\nop *(float, float) -> float;\nop /(float, float) -> float;\nop %(float, float) -> float;\nop **(float, float) -> float;\nop ==(float, float) -> bool;\nop !=(float, float) -> bool;\nop >(float, float) -> bool;\nop >=(float, float) -> bool;\nop <(float, float) -> bool;\nop <=(float, float) -> bool;\n\nop +(float, int) -> float;\nop -(float, int) -> float;\nop *(float, int) -> float;\nop /(float, int) -> float;\nop %(float, int) -> float;\nop **(float, int) -> float;\nop ==(float, int) -> bool;\nop !=(float, int) -> bool;\nop >(float, int) -> bool;\nop >=(float, int) -> bool;\nop <(float, int) -> bool;\nop <=(float, int) -> bool;\n\nop +(int, float) -> float;\nop -(int, float) -> float;\nop *(int, float) -> float;\nop /(int, float) -> float;\nop %(int, float) -> float;\nop **(int, float) -> float;\nop ==(int, float) -> bool;\nop !=(int, float) -> bool;\nop >(int, float) -> bool;\nop >=(int, float) -> bool;\nop <(int, float) -> bool;\nop <=(int, float) -> bool;\n\nop +(Decimal, Decimal) -> Decimal;\nop -(Decimal, Decimal) -> Decimal;\nop *(Decimal, Decimal) -> Decimal;\nop /(Decimal, Decimal) -> Decimal;\nop %(Decimal, Decimal) -> Decimal;\nop **(Decimal, Decimal) -> Decimal;\nop ==(Decimal, Decimal) -> bool;\nop !=(Decimal, Decimal) -> bool;\nop >(Decimal, Decimal) -> bool;\nop >=(Decimal, Decimal) -> bool;\nop <(Decimal, Decimal) -> bool;\nop <=(Decimal, Decimal) -> bool;\n\nop +(Decimal, int) -> Decimal;\nop -(Decimal, int) -> Decimal;\nop *(Decimal, int) -> Decimal;\nop /(Decimal, int) -> Decimal;\nop %(Decimal, int) -> Decimal;\nop **(Decimal, int) -> Decimal;\nop ==(Decimal, int) -> bool;\nop !=(Decimal, int) -> bool;\nop >(Decimal, int) -> bool;\nop >=(Decimal, int) -> bool;\nop <(Decimal, int) -> bool;\nop <=(Decimal, int) -> bool;\n\nop +(int, Decimal) -> Decimal;\nop -(int, Decimal) -> Decimal;\nop *(int, Decimal) -> Decimal;\nop /(int, Decimal) -> Decimal;\nop %(int, Decimal) -> Decimal;\nop **(int, Decimal) -> Decimal;\nop ==(int, Decimal) -> bool;\nop !=(int, Decimal) -> bool;\nop >(int, Decimal) -> bool;\nop >=(int, Decimal) -> bool;\nop <(int, Decimal) -> bool;\nop <=(int, Decimal) -> bool;\n\nop +(String, String) -> String;\nop -(String, String) -> String;\nop ==(String, String) -> bool;\nop !=(String, String) -> bool;\nop >(String, String) -> bool;\nop >=(String, String) -> bool;\nop <(String, String) -> bool;\nop <=(String, String) -> bool;\n\nop +(char, char) -> String;\nop ==(char, char) -> bool;\nop !=(char, char) -> bool;\nop >(char, char) -> bool;\nop >=(char, char) -> bool;\nop <(char, char) -> bool;\nop <=(char, char) -> bool;\n\nop +(char, String) -> String;\nop ==(char, String) -> bool;\nop !=(char, String) -> bool;\nop >(char, String) -> bool;\nop >=(char, String) -> bool;\nop <(char, String) -> bool;\nop <=(char, String) -> bool;\n\nop +(String, char) -> String;\nop -(String, char) -> String;\nop ==(String, char) -> bool;\nop !=(String, char) -> bool;\nop >(String, char) -> bool;\nop >=(String, char) -> bool;\nop <(String, char) -> bool;\nop <=(String, char) -> bool;\n\nop +((), String) -> String;\nop ==((), String) -> bool;\nop !=((), String) -> bool;\nop >((), String) -> bool;\nop >=((), String) -> bool;\nop <((), String) -> bool;\nop <=((), String) -> bool;\n\nop +(String, ()) -> String;\nop ==(String, ()) -> bool;\nop !=(String, ()) -> bool;\nop >(String, ()) -> bool;\nop >=(String, ()) -> bool;\nop <(String, ()) -> bool;\nop <=(String, ()) -> bool;\n\nop +(Blob, Blob) -> Blob;\nop +(Blob, char) -> Blob;\nop ==(Blob, Blob) -> bool;\nop !=(Blob, Blob) -> bool;\n\n\nop ==(Range<int>, RangeInclusive<int>) -> bool;\nop !=(Range<int>, RangeInclusive<int>) -> bool;\n\nop ==(RangeInclusive<int>, Range<int>) -> bool;\nop !=(RangeInclusive<int>, Range<int>) -> bool;\n\nop ==(Range<int>, Range<int>) -> bool;\nop !=(Range<int>, Range<int>) -> bool;\n\nop ==(RangeInclusive<int>, RangeInclusive<int>) -> bool;\nop !=(RangeInclusive<int>, RangeInclusive<int>) -> bool;\n\nop ==(?, ?) -> bool;\nop !=(?, ?) -> bool;\nop >(?, ?) -> bool;\nop >=(?, ?) -> bool;\nop <(?, ?) -> bool;\nop <=(?, ?) -> bool;\n\n\nop &=(bool, bool);\nop |=(bool, bool);\n\nop +=(int, int);\nop -=(int, int);\nop *=(int, int);\nop /=(int, int);\nop %=(int, int);\nop **=(int, int);\nop >>=(int, int);\nop <<=(int, int);\nop &=(int, int);\nop |=(int, int);\nop ^=(int, int);\n\nop +=(float, float);\nop -=(float, float);\nop *=(float, float);\nop /=(float, float);\nop %=(float, float);\nop **=(float, float);\n\nop +=(float, int);\nop -=(float, int);\nop *=(float, int);\nop /=(float, int);\nop %=(float, int);\nop **=(float, int);\n\nop +=(Decimal, Decimal);\nop -=(Decimal, Decimal);\nop *=(Decimal, Decimal);\nop /=(Decimal, Decimal);\nop %=(Decimal, Decimal);\nop **=(Decimal, Decimal);\n\nop +=(Decimal, int);\nop -=(Decimal, int);\nop *=(Decimal, int);\nop /=(Decimal, int);\nop %=(Decimal, int);\nop **=(Decimal, int);\n\nop +=(String, String);\nop -=(String, String);\nop +=(String, char);\nop -=(String, char);\nop +=(char, String);\nop +=(char, char);\n\nop +=(Array, Array);\nop +=(Array, ?);\n\nop +=(Blob, Blob);\nop +=(Blob, int);\nop +=(Blob, char);\nop +=(Blob, String);\n\nop in(?, Array) -> bool;\nop in(String, String) -> bool;\nop in(char, String) -> bool;\nop in(int, Range<int>) -> bool;\nop in(int, RangeInclusive<int>) -> bool;\nop in(String, Map) -> bool;\nop in(int, Blob) -> bool;\n\n/// Display any data to the standard output.\n///\n/// # Example\n/// \n/// ```rhai\n/// let answer = 42;\n/// \n/// print(`The Answer is ${answer}`);\n/// ```\nfn print(data: ?);\n\n/// Display any data to the standard output in debug format.\n///\n/// # Example\n/// \n/// ```rhai\n/// let answer = 42;\n/// \n/// debug(answer);\n/// ```\nfn debug(data: ?);\n\n/// Get the type of a value.\n///\n/// # Example\n/// \n/// ```rhai\n/// let x = "hello, world!";\n/// \n/// print(x.type_of());     // prints "string"\n/// ```\nfn type_of(data: ?) -> String;\n\n/// Create a function pointer to a named function.\n///\n/// If the specified name is not a valid function name, an error is raised.\n/// \n/// # Example\n/// \n/// ```rhai\n/// let f = Fn("foo");      // function pointer to \'foo\'\n/// \n/// f.call(42);             // call: foo(42)\n/// ```\nfn Fn(fn_name: String) -> FnPtr;\n\n/// Call a function pointed to by a function pointer,\n/// passing following arguments to the function call.\n///\n/// If an appropriate function is not found, an error is raised.\n/// \n/// # Example\n/// \n/// ```rhai\n/// let f = Fn("foo");      // function pointer to \'foo\'\n/// \n/// f.call(1, 2, 3);        // call: foo(1, 2, 3)\n/// ```\nfn call(fn_ptr: FnPtr, ...args: ?) -> ?;\n\n/// Call a function pointed to by a function pointer, binding the `this` pointer\n/// to the object of the method call, and passing on following arguments to the function call.\n///\n/// If an appropriate function is not found, an error is raised.\n/// \n/// # Example\n/// \n/// ```rhai\n/// fn add(x) {\n///     this + x\n/// }\n/// \n/// let f = Fn("add");      // function pointer to \'add\'\n/// \n/// let x = 41;\n/// \n/// let r = x.call(f, 1);   // call: add(1) with \'this\' = \'x\'\n/// \n/// print(r);               // prints 42\n/// ```\nfn call(obj: ?, fn_ptr: FnPtr, ...args: ?) -> ?;\n\n/// Curry a number of arguments into a function pointer and return it as a new function pointer.\n/// \n/// # Example\n/// \n/// ```rhai\n/// fn foo(x, y, z) {\n///     x + y + z\n/// }\n/// \n/// let f = Fn("foo");\n/// \n/// let g = f.curry(1, 2);  // curried arguments: 1, 2\n/// \n/// g.call(3);              // call: foo(1, 2, 3)\n/// ```\nfn curry(fn_ptr: FnPtr, ...args: ?) -> FnPtr;\n\n/// Return `true` if a script-defined function exists with a specified name and\n/// number of parameters.\n/// \n/// # Example\n/// \n/// ```rhai\n/// fn foo(x) { }\n/// \n/// print(is_def_fn("foo", 1));     // prints true\n/// print(is_def_fn("foo", 2));     // prints false\n/// print(is_def_fn("foo", 0));     // prints false\n/// print(is_def_fn("bar", 1));     // prints false\n/// ```\nfn is_def_fn(fn_name: String, num_params: int) -> bool;\n\n/// Return `true` if a variable matching a specified name is defined.\n/// \n/// # Example\n/// \n/// ```rhai\n/// let x = 42;\n/// \n/// print(is_def_var("x"));         // prints true\n/// print(is_def_var("foo"));       // prints false\n/// \n/// {\n///     let y = 1;\n///     print(is_def_var("y"));     // prints true\n/// }\n/// \n/// print(is_def_var("y"));         // prints false\n/// ```\nfn is_def_var(var_name: String) -> bool;\n\n/// Return `true` if the variable is shared.\n/// \n/// # Example\n/// \n/// ```rhai\n/// let x = 42;\n/// \n/// print(is_shared(x));        // prints false\n/// \n/// let f = || x;               // capture \'x\', making it shared\n/// \n/// print(is_shared(x));        // prints true\n/// ```\nfn is_shared(variable: ?) -> bool;\n\n/// Evaluate a text script within the current scope.\n/// \n/// # Example\n/// \n/// ```rhai\n/// let x = 42;\n/// \n/// eval("let y = x; x = 123;");\n/// \n/// print(x);           // prints 123\n/// print(y);           // prints 42\n/// ```\nfn eval(script: String) -> ?;\n\n/// Return `true` if the string contains another string.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = "hello world!";\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if "world" in x {\n///     print("found!");\n/// }\n/// ```\nfn contains(string: String, find: String) -> bool;\n\n/// Return `true` if the string contains a character.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = "hello world!";\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if \'w\' in x {\n///     print("found!");\n/// }\n/// ```\nfn contains(string: String, ch: char) -> bool;\n\n/// Return `true` if a value falls within the exclusive range.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let r = 1..100;\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if 42 in r {\n///     print("found!");\n/// }\n/// ```\nfn contains(range: Range<int>, value: int) -> bool;\n\n/// Return `true` if a value falls within the inclusive range.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let r = 1..=100;\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if 42 in r {\n///     print("found!");\n/// }\n/// ```\nfn contains(range: RangeInclusive<int>, value: int) -> bool;\n\n/// Return `true` if a key exists within the object map.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if "c" in m {\n///     print("found!");\n/// }\n/// ```\nfn contains(map: Map, string: String) -> bool;\n\n/// Return `true` if a value is found within the BLOB.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if 3 in b {\n///     print("found!");\n/// }\n/// ```\nfn contains(blob: Blob, value: int) -> bool;\n\nop minus(int, int) -> int;\n\nop !(bool) -> bool;\n\n/// Return `true` if two arrays are not-equal (i.e. any element not equal or not in the same order).\n///\n/// The operator `==` is used to compare elements and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n/// let y = [1, 2, 3, 4, 5];\n/// let z = [1, 2, 3, 4];\n///\n/// print(x != y);      // prints false\n///\n/// print(x != z);      // prints true\n/// ```\nop !=(Array, Array) -> bool;\n\n/// Return `true` if two object maps are not equal (i.e. at least one property value is not equal).\n///\n/// The operator `==` is used to compare property values and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let m1 = #{a:1, b:2, c:3};\n/// let m2 = #{a:1, b:2, c:3};\n/// let m3 = #{a:1, c:3};\n///\n/// print(m1 != m2);        // prints false\n///\n/// print(m1 != m3);        // prints true\n/// ```\nop !=(Map, Map) -> bool;\n\n/// Return `true` if two timestamps are not equal.\nop !=(Instant, Instant) -> bool;\n\nop !=(int, f32) -> bool;\n\nop !=(int, float) -> bool;\n\nop !=(f32, int) -> bool;\n\nop !=(f32, f32) -> bool;\n\nop !=(float, int) -> bool;\n\nop !=(i128, i128) -> bool;\n\nop !=(i16, i16) -> bool;\n\nop !=(i32, i32) -> bool;\n\nop !=(i8, i8) -> bool;\n\nop !=(u128, u128) -> bool;\n\nop !=(u16, u16) -> bool;\n\nop !=(u32, u32) -> bool;\n\nop !=(u64, u64) -> bool;\n\nop !=(u8, u8) -> bool;\n\nop %(int, f32) -> f32;\n\nop %(f32, int) -> f32;\n\nop %(f32, f32) -> f32;\n\nop %(i128, i128) -> i128;\n\nop %(i16, i16) -> i16;\n\nop %(i32, i32) -> i32;\n\nop %(i8, i8) -> i8;\n\nop %(u128, u128) -> u128;\n\nop %(u16, u16) -> u16;\n\nop %(u32, u32) -> u32;\n\nop %(u64, u64) -> u64;\n\nop %(u8, u8) -> u8;\n\nop &(i128, i128) -> i128;\n\nop &(i16, i16) -> i16;\n\nop &(i32, i32) -> i32;\n\nop &(i8, i8) -> i8;\n\nop &(u128, u128) -> u128;\n\nop &(u16, u16) -> u16;\n\nop &(u32, u32) -> u32;\n\nop &(u64, u64) -> u64;\n\nop &(u8, u8) -> u8;\n\nop *(int, f32) -> f32;\n\nop *(f32, int) -> f32;\n\nop *(f32, f32) -> f32;\n\nop *(i128, i128) -> i128;\n\nop *(i16, i16) -> i16;\n\nop *(i32, i32) -> i32;\n\nop *(i8, i8) -> i8;\n\nop *(u128, u128) -> u128;\n\nop *(u16, u16) -> u16;\n\nop *(u32, u32) -> u32;\n\nop *(u64, u64) -> u64;\n\nop *(u8, u8) -> u8;\n\nop **(f32, int) -> f32;\n\nop **(f32, f32) -> f32;\n\nop **(i128, int) -> i128;\n\nop **(i16, int) -> i16;\n\nop **(i32, int) -> i32;\n\nop **(i8, int) -> i8;\n\nop **(u128, int) -> u128;\n\nop **(u16, int) -> u16;\n\nop **(u32, int) -> u32;\n\nop **(u64, int) -> u64;\n\nop **(u8, int) -> u8;\n\nop +(Decimal) -> Decimal;\n\nop +(int) -> int;\n\nop +(f32) -> f32;\n\nop +(float) -> float;\n\nop +(i128) -> i128;\n\nop +(i16) -> i16;\n\nop +(i32) -> i32;\n\nop +(i8) -> i8;\n\nop +((), String) -> String;\n\n/// Combine two arrays into a new array and return it.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n/// let y = [true, \'x\'];\n///\n/// print(x + y);   // prints "[1, 2, 3, true, \'x\']"\n///\n/// print(x);       // prints "[1, 2, 3"\n/// ```\nop +(Array, Array) -> Array;\n\nop +(char, String) -> String;\n\nop +(?, String) -> String;\n\n/// Make a copy of the object map, add all property values of another object map\n/// (existing property values of the same names are replaced), then returning it.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n/// let n = #{a: 42, d:0};\n///\n/// print(m + n);       // prints "#{a:42, b:2, c:3, d:0}"\n///\n/// print(m);           // prints "#{a:1, b:2, c:3}"\n/// ```\nop +(Map, Map) -> Map;\n\nop +(String, String) -> String;\n\nop +(String, char) -> String;\n\nop +(String, ?) -> String;\n\nop +(String, Blob) -> String;\n\nop +(String, ()) -> String;\n\n/// Add the specified number of `seconds` to the timestamp and return it as a new timestamp.\nop +(Instant, float) -> Instant;\n\n/// Add the specified number of `seconds` to the timestamp and return it as a new timestamp.\nop +(Instant, int) -> Instant;\n\nop +(Blob, String) -> String;\n\nop +(int, f32) -> f32;\n\nop +(f32, int) -> f32;\n\nop +(f32, f32) -> f32;\n\nop +(i128, i128) -> i128;\n\nop +(i16, i16) -> i16;\n\nop +(i32, i32) -> i32;\n\nop +(i8, i8) -> i8;\n\nop +(u128, u128) -> u128;\n\nop +(u16, u16) -> u16;\n\nop +(u32, u32) -> u32;\n\nop +(u64, u64) -> u64;\n\nop +(u8, u8) -> u8;\n\n/// Add all property values of another object map into the object map.\n/// Existing property values of the same names are replaced.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n/// let n = #{a: 42, d:0};\n///\n/// m.mixin(n);\n///\n/// print(m);       // prints "#{a:42, b:2, c:3, d:0}"\n/// ```\nop +=(Map, Map) -> ();\n\nop +=(String, String) -> ();\n\nop +=(String, char) -> ();\n\nop +=(String, ()) -> ();\n\nop +=(String, ?) -> ();\n\nop +=(String, Blob) -> ();\n\n/// Add the specified number of `seconds` to the timestamp.\nop +=(Instant, float) -> ();\n\n/// Add the specified number of `seconds` to the timestamp.\nop +=(Instant, int) -> ();\n\nop -(Decimal) -> Decimal;\n\nop -(int) -> int;\n\nop -(f32) -> f32;\n\nop -(float) -> float;\n\nop -(i128) -> i128;\n\nop -(i16) -> i16;\n\nop -(i32) -> i32;\n\nop -(i8) -> i8;\n\n/// Return the number of seconds between two timestamps.\nop -(Instant, Instant) -> RhaiResult;\n\n/// Subtract the specified number of `seconds` from the timestamp and return it as a new timestamp.\nop -(Instant, float) -> Instant;\n\n/// Subtract the specified number of `seconds` from the timestamp and return it as a new timestamp.\nop -(Instant, int) -> Instant;\n\nop -(int, f32) -> f32;\n\nop -(f32, int) -> f32;\n\nop -(f32, f32) -> f32;\n\nop -(i128, i128) -> i128;\n\nop -(i16, i16) -> i16;\n\nop -(i32, i32) -> i32;\n\nop -(i8, i8) -> i8;\n\nop -(u128, u128) -> u128;\n\nop -(u16, u16) -> u16;\n\nop -(u32, u32) -> u32;\n\nop -(u64, u64) -> u64;\n\nop -(u8, u8) -> u8;\n\n/// Subtract the specified number of `seconds` from the timestamp.\nop -=(Instant, float) -> ();\n\n/// Subtract the specified number of `seconds` from the timestamp.\nop -=(Instant, int) -> ();\n\nop /(int, f32) -> f32;\n\nop /(f32, int) -> f32;\n\nop /(f32, f32) -> f32;\n\nop /(i128, i128) -> i128;\n\nop /(i16, i16) -> i16;\n\nop /(i32, i32) -> i32;\n\nop /(i8, i8) -> i8;\n\nop /(u128, u128) -> u128;\n\nop /(u16, u16) -> u16;\n\nop /(u32, u32) -> u32;\n\nop /(u64, u64) -> u64;\n\nop /(u8, u8) -> u8;\n\n/// Return `true` if the first timestamp is earlier than the second.\nop <(Instant, Instant) -> bool;\n\nop <(int, f32) -> bool;\n\nop <(int, float) -> bool;\n\nop <(f32, int) -> bool;\n\nop <(f32, f32) -> bool;\n\nop <(float, int) -> bool;\n\nop <(i128, i128) -> bool;\n\nop <(i16, i16) -> bool;\n\nop <(i32, i32) -> bool;\n\nop <(i8, i8) -> bool;\n\nop <(u128, u128) -> bool;\n\nop <(u16, u16) -> bool;\n\nop <(u32, u32) -> bool;\n\nop <(u64, u64) -> bool;\n\nop <(u8, u8) -> bool;\n\nop <<(i128, int) -> i128;\n\nop <<(i16, int) -> i16;\n\nop <<(i32, int) -> i32;\n\nop <<(i8, int) -> i8;\n\nop <<(u128, int) -> u128;\n\nop <<(u16, int) -> u16;\n\nop <<(u32, int) -> u32;\n\nop <<(u64, int) -> u64;\n\nop <<(u8, int) -> u8;\n\n/// Return `true` if the first timestamp is earlier than or equals to the second.\nop <=(Instant, Instant) -> bool;\n\nop <=(int, f32) -> bool;\n\nop <=(int, float) -> bool;\n\nop <=(f32, int) -> bool;\n\nop <=(f32, f32) -> bool;\n\nop <=(float, int) -> bool;\n\nop <=(i128, i128) -> bool;\n\nop <=(i16, i16) -> bool;\n\nop <=(i32, i32) -> bool;\n\nop <=(i8, i8) -> bool;\n\nop <=(u128, u128) -> bool;\n\nop <=(u16, u16) -> bool;\n\nop <=(u32, u32) -> bool;\n\nop <=(u64, u64) -> bool;\n\nop <=(u8, u8) -> bool;\n\n/// Return `true` if two arrays are equal (i.e. all elements are equal and in the same order).\n///\n/// The operator `==` is used to compare elements and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n/// let y = [1, 2, 3, 4, 5];\n/// let z = [1, 2, 3, 4];\n///\n/// print(x == y);      // prints true\n///\n/// print(x == z);      // prints false\n/// ```\nop ==(Array, Array) -> bool;\n\n/// Return `true` if two object maps are equal (i.e. all property values are equal).\n///\n/// The operator `==` is used to compare property values and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let m1 = #{a:1, b:2, c:3};\n/// let m2 = #{a:1, b:2, c:3};\n/// let m3 = #{a:1, c:3};\n///\n/// print(m1 == m2);        // prints true\n///\n/// print(m1 == m3);        // prints false\n/// ```\nop ==(Map, Map) -> bool;\n\n/// Return `true` if two timestamps are equal.\nop ==(Instant, Instant) -> bool;\n\nop ==(int, f32) -> bool;\n\nop ==(int, float) -> bool;\n\nop ==(f32, int) -> bool;\n\nop ==(f32, f32) -> bool;\n\nop ==(float, int) -> bool;\n\nop ==(i128, i128) -> bool;\n\nop ==(i16, i16) -> bool;\n\nop ==(i32, i32) -> bool;\n\nop ==(i8, i8) -> bool;\n\nop ==(u128, u128) -> bool;\n\nop ==(u16, u16) -> bool;\n\nop ==(u32, u32) -> bool;\n\nop ==(u64, u64) -> bool;\n\nop ==(u8, u8) -> bool;\n\n/// Return `true` if the first timestamp is later than the second.\nop >(Instant, Instant) -> bool;\n\nop >(int, f32) -> bool;\n\nop >(int, float) -> bool;\n\nop >(f32, int) -> bool;\n\nop >(f32, f32) -> bool;\n\nop >(float, int) -> bool;\n\nop >(i128, i128) -> bool;\n\nop >(i16, i16) -> bool;\n\nop >(i32, i32) -> bool;\n\nop >(i8, i8) -> bool;\n\nop >(u128, u128) -> bool;\n\nop >(u16, u16) -> bool;\n\nop >(u32, u32) -> bool;\n\nop >(u64, u64) -> bool;\n\nop >(u8, u8) -> bool;\n\n/// Return `true` if the first timestamp is later than or equals to the second.\nop >=(Instant, Instant) -> bool;\n\nop >=(int, f32) -> bool;\n\nop >=(int, float) -> bool;\n\nop >=(f32, int) -> bool;\n\nop >=(f32, f32) -> bool;\n\nop >=(float, int) -> bool;\n\nop >=(i128, i128) -> bool;\n\nop >=(i16, i16) -> bool;\n\nop >=(i32, i32) -> bool;\n\nop >=(i8, i8) -> bool;\n\nop >=(u128, u128) -> bool;\n\nop >=(u16, u16) -> bool;\n\nop >=(u32, u32) -> bool;\n\nop >=(u64, u64) -> bool;\n\nop >=(u8, u8) -> bool;\n\nop >>(i128, int) -> i128;\n\nop >>(i16, int) -> i16;\n\nop >>(i32, int) -> i32;\n\nop >>(i8, int) -> i8;\n\nop >>(u128, int) -> u128;\n\nop >>(u16, int) -> u16;\n\nop >>(u32, int) -> u32;\n\nop >>(u64, int) -> u64;\n\nop >>(u8, int) -> u8;\n\n/// Return the natural number _e_.\nfn E() -> float;\n\n/// Return the number π.\nfn PI() -> float;\n\nop ^(i128, i128) -> i128;\n\nop ^(i16, i16) -> i16;\n\nop ^(i32, i32) -> i32;\n\nop ^(i8, i8) -> i8;\n\nop ^(u128, u128) -> u128;\n\nop ^(u16, u16) -> u16;\n\nop ^(u32, u32) -> u32;\n\nop ^(u64, u64) -> u64;\n\nop ^(u8, u8) -> u8;\n\n/// Return the absolute value of the decimal number.\nfn abs(x: Decimal) -> Decimal;\n\n/// Return the absolute value of the number.\nfn abs(x: int) -> int;\n\n/// Return the absolute value of the floating-point number.\nfn abs(x: f32) -> f32;\n\n/// Return the absolute value of the floating-point number.\nfn abs(x: float) -> float;\n\n/// Return the absolute value of the number.\nfn abs(x: i128) -> i128;\n\n/// Return the absolute value of the number.\nfn abs(x: i16) -> i16;\n\n/// Return the absolute value of the number.\nfn abs(x: i32) -> i32;\n\n/// Return the absolute value of the number.\nfn abs(x: i8) -> i8;\n\n/// Return the arc-cosine of the floating-point number, in radians.\nfn acos(x: float) -> float;\n\n/// Return the arc-hyperbolic-cosine of the floating-point number, in radians.\nfn acosh(x: float) -> float;\n\n/// Return `true` if all elements in the array return `true` when applied a function named by `filter`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.all(|v| v > 3));        // prints false\n///\n/// print(x.all(|v| v > 1));        // prints true\n///\n/// print(x.all(|v, i| i > v));     // prints false\n/// ```\nfn all(array: Array, filter: String) -> bool;\n\n/// Return `true` if all elements in the array return `true` when applied the `filter` function.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.all(|v| v > 3));        // prints false\n///\n/// print(x.all(|v| v > 1));        // prints true\n///\n/// print(x.all(|v, i| i > v));     // prints false\n/// ```\nfn all(array: Array, filter: FnPtr) -> bool;\n\n/// Add all the elements of another array to the end of the array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n/// let y = [true, \'x\'];\n///\n/// x.push(y);\n///\n/// print(x);       // prints "[1, 2, 3, true, \'x\']"\n/// ```\nfn append(array: Array, new_array: Array) -> ();\n\n/// Add another BLOB to the end of the BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob(5, 0x42);\n/// let b2 = blob(3, 0x11);\n///\n/// b1.push(b2);\n///\n/// print(b1);      // prints "[4242424242111111]"\n/// ```\nfn append(blob1: Blob, blob2: Blob) -> ();\n\n/// Add a character (as UTF-8 encoded byte-stream) to the end of the BLOB\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(5, 0x42);\n///\n/// b.append(\'!\');\n///\n/// print(b);       // prints "[424242424221]"\n/// ```\nfn append(blob: Blob, character: char) -> ();\n\n/// Add a string (as UTF-8 encoded byte-stream) to the end of the BLOB\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(5, 0x42);\n///\n/// b.append("hello");\n///\n/// print(b);       // prints "[424242424268656c 6c6f]"\n/// ```\nfn append(blob: Blob, string: String) -> ();\n\n/// Add a new byte `value` to the end of the BLOB.\n///\n/// Only the lower 8 bits of the `value` are used; all other bits are ignored.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b.push(0x42);\n///\n/// print(b);       // prints "[42]"\n/// ```\nfn append(blob: Blob, value: int) -> ();\n\nfn append(string: String, item: ?) -> ();\n\nfn append(string: String, utf8: Blob) -> ();\n\n/// Convert the BLOB into a string.\n///\n/// The byte stream must be valid UTF-8, otherwise an error is raised.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(5, 0x42);\n///\n/// let x = b.as_string();\n///\n/// print(x);       // prints "FFFFF"\n/// ```\nfn as_string(blob: Blob) -> String;\n\n/// Return the arc-sine of the floating-point number, in radians.\nfn asin(x: float) -> float;\n\n/// Return the arc-hyperbolic-sine of the floating-point number, in radians.\nfn asinh(x: float) -> float;\n\n/// Return the arc-tangent of the floating-point number, in radians.\nfn atan(x: float) -> float;\n\n/// Return the arc-tangent of the floating-point numbers `x` and `y`, in radians.\nfn atan(x: float, y: float) -> float;\n\n/// Return the arc-hyperbolic-tangent of the floating-point number, in radians.\nfn atanh(x: float) -> float;\n\n/// Get an array of object maps containing the function calls stack.\n///\n/// If there is no debugging interface registered, an empty array is returned.\n///\n/// An array of strings is returned under `no_object`.\nfn back_trace() -> Array;\n\n/// Return an iterator over all the bits in the number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// for bit in x.bits() {\n///     print(bit);\n/// }\n/// ```\nfn bits(value: int) -> Iterator<bool>;\n\n/// Return an iterator over the bits in the number starting from the specified `start` position.\n///\n/// If `start` < 0, position counts from the MSB (Most Significant Bit)>.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// for bit in x.bits(10) {\n///     print(bit);\n/// }\n/// ```\nfn bits(value: int, from: int) -> Iterator<bool>;\n\n/// Return an iterator over an exclusive range of bits in the number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// for bit in x.bits(10..24) {\n///     print(bit);\n/// }\n/// ```\nfn bits(value: int, range: Range<int>) -> Iterator<bool>;\n\n/// Return an iterator over an inclusive range of bits in the number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// for bit in x.bits(10..=23) {\n///     print(bit);\n/// }\n/// ```\nfn bits(value: int, range: RangeInclusive<int>) -> Iterator<bool>;\n\n/// Return an iterator over a portion of bits in the number.\n///\n/// * If `start` < 0, position counts from the MSB (Most Significant Bit)>.\n/// * If `len` ≤ 0, an empty iterator is returned.\n/// * If `start` position + `len` ≥ length of string, all bits of the number after the `start` position are iterated.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// for bit in x.bits(10, 8) {\n///     print(bit);\n/// }\n/// ```\nfn bits(value: int, from: int, len: int) -> Iterator<bool>;\n\n/// Return a new, empty BLOB.\nfn blob() -> Blob;\n\n/// Return a new BLOB of the specified length, filled with zeros.\n///\n/// If `len` ≤ 0, an empty BLOB is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(10);\n///\n/// print(b);       // prints "[0000000000000000 0000]"\n/// ```\nfn blob(len: int) -> Blob;\n\n/// Return a new BLOB of the specified length, filled with copies of the initial `value`.\n///\n/// If `len` ≤ 0, an empty BLOB is returned.\n///\n/// Only the lower 8 bits of the initial `value` are used; all other bits are ignored.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(10, 0x42);\n///\n/// print(b);       // prints "[4242424242424242 4242]"\n/// ```\nfn blob(len: int, value: int) -> Blob;\n\n/// Return the length of the string, in number of bytes used to store it in UTF-8 encoding.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "朝には紅顔ありて夕べには白骨となる";\n///\n/// print(text.bytes);      // prints 51\n/// ```\nfn bytes(string: String) -> int;\n\n/// Return the smallest whole number larger than or equals to the decimal number.\nfn ceiling(x: Decimal) -> Decimal;\n\n/// Return the smallest whole number larger than or equals to the floating-point number.\nfn ceiling(x: float) -> float;\n\n/// Return an iterator over the characters in the string.\n///\n/// # Example\n///\n/// ```rhai\n/// for ch in "hello, world!".chars() {\n///     print(ch);\n/// }\n/// ```\nfn chars(string: String) -> Iterator<char>;\n\n/// Return an iterator over the characters in the string starting from the `start` position.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, position counts from the beginning of the string.\n/// * If `start` ≥ length of string, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// for ch in "hello, world!".chars(2) {\n///     print(ch);\n/// }\n/// ```\nfn chars(string: String, from: int) -> Iterator<char>;\n\n/// Return an iterator over an exclusive range of characters in the string.\n///\n/// # Example\n///\n/// ```rhai\n/// for ch in "hello, world!".chars(2..5) {\n///     print(ch);\n/// }\n/// ```\nfn chars(string: String, range: Range<int>) -> Iterator<char>;\n\n/// Return an iterator over an inclusive range of characters in the string.\n///\n/// # Example\n///\n/// ```rhai\n/// for ch in "hello, world!".chars(2..=6) {\n///     print(ch);\n/// }\n/// ```\nfn chars(string: String, range: RangeInclusive<int>) -> Iterator<char>;\n\n/// Return an iterator over a portion of characters in the string.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, position counts from the beginning of the string.\n/// * If `start` ≥ length of string, an empty iterator is returned.\n/// * If `len` ≤ 0, an empty iterator is returned.\n/// * If `start` position + `len` ≥ length of string, all characters of the string after the `start` position are iterated.\n///\n/// # Example\n///\n/// ```rhai\n/// for ch in "hello, world!".chars(2, 4) {\n///     print(ch);\n/// }\n/// ```\nfn chars(string: String, start: int, len: int) -> Iterator<char>;\n\n/// Cut off the head of the array, leaving a tail of the specified length.\n///\n/// * If `len` ≤ 0, the array is cleared.\n/// * If `len` ≥ length of array, the array is not modified.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// x.chop(3);\n///\n/// print(x);       // prints "[3, 4, 5]"\n///\n/// x.chop(10);\n///\n/// print(x);       // prints "[3, 4, 5]"\n/// ```\nfn chop(array: Array, len: int) -> ();\n\n/// Cut off the head of the BLOB, leaving a tail of the specified length.\n///\n/// * If `len` ≤ 0, the BLOB is cleared.\n/// * If `len` ≥ length of BLOB, the BLOB is not modified.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// b.chop(3);\n///\n/// print(b);           // prints "[030405]"\n///\n/// b.chop(10);\n///\n/// print(b);           // prints "[030405]"\n/// ```\nfn chop(blob: Blob, len: int) -> ();\n\n/// Clear the array.\nfn clear(array: Array) -> ();\n\n/// Clear the BLOB.\nfn clear(blob: Blob) -> ();\n\n/// Clear the object map.\nfn clear(map: Map) -> ();\n\n/// Clear the string, making it empty.\nfn clear(string: String) -> ();\n\n/// Return `true` if the array contains an element that equals `value`.\n///\n/// The operator `==` is used to compare elements with `value` and must be defined,\n/// otherwise `false` is assumed.\n///\n/// This function also drives the `in` operator.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// // The \'in\' operator calls \'contains\' in the background\n/// if 4 in x {\n///     print("found!");\n/// }\n/// ```\nfn contains(array: Array, value: ?) -> bool;\n\n/// Return the cosine of the decimal number in radians.\nfn cos(x: Decimal) -> Decimal;\n\n/// Return the cosine of the floating-point number in radians.\nfn cos(x: float) -> float;\n\n/// Return the hyperbolic cosine of the floating-point number in radians.\nfn cosh(x: float) -> float;\n\n/// Remove all characters from the string except those within an exclusive `range`.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// text.crop(2..8);\n///\n/// print(text);        // prints "llo, w"\n/// ```\nfn crop(string: String, range: Range<int>) -> ();\n\n/// Remove all characters from the string except those within an inclusive `range`.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// text.crop(2..=8);\n///\n/// print(text);        // prints "llo, wo"\n/// ```\nfn crop(string: String, range: RangeInclusive<int>) -> ();\n\n/// Remove all characters from the string except until the `start` position.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, the string is not modified.\n/// * If `start` ≥ length of string, the entire string is cleared.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// text.crop(5);\n///\n/// print(text);            // prints ", world!"\n///\n/// text.crop(-3);\n///\n/// print(text);            // prints "ld!"\n/// ```\nfn crop(string: String, start: int) -> ();\n\n/// Remove all characters from the string except those within a range.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, position counts from the beginning of the string.\n/// * If `start` ≥ length of string, the entire string is cleared.\n/// * If `len` ≤ 0, the entire string is cleared.\n/// * If `start` position + `len` ≥ length of string, only the portion of the string after the `start` position is retained.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// text.crop(2, 8);\n///\n/// print(text);        // prints "llo, wor"\n///\n/// text.crop(-5, 3);\n///\n/// print(text);        // prints ", w"\n/// ```\nfn crop(string: String, start: int, len: int) -> ();\n\n/// Return the empty string.\nfn debug() -> String;\n\n/// Convert the array into a string.\nfn debug(array: Array) -> String;\n\n/// Convert the string into debug format.\nfn debug(character: char) -> String;\n\n/// Convert the function pointer into a string in debug format.\nfn debug(f: FnPtr) -> String;\n\n/// Convert the value of the `item` into a string in debug format.\nfn debug(item: ?) -> String;\n\n/// Convert the object map into a string.\nfn debug(map: Map) -> String;\n\n/// Convert the value of `number` into a string.\nfn debug(number: f32) -> String;\n\n/// Convert the value of `number` into a string.\nfn debug(number: float) -> String;\n\n/// Convert the string into debug format.\nfn debug(string: String) -> String;\n\n/// Convert the unit into a string in debug format.\nfn debug(unit: ()) -> String;\n\n/// Convert the boolean value into a string in debug format.\nfn debug(value: bool) -> String;\n\n/// Remove duplicated _consecutive_ elements from the array.\n///\n/// The operator `==` is used to compare elements and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 2, 2, 3, 4, 3, 3, 2, 1];\n///\n/// x.dedup();\n///\n/// print(x);       // prints "[1, 2, 3, 4, 3, 2, 1]"\n/// ```\nfn dedup(array: Array) -> ();\n\n/// Remove duplicated _consecutive_ elements from the array that return `true` when applied a\n/// function named by `comparer`.\n///\n/// No element is removed if the correct `comparer` function does not exist.\n///\n/// # Function Parameters\n///\n/// * `element1`: copy of the current array element to compare\n/// * `element2`: copy of the next array element to compare\n///\n/// ## Return Value\n///\n/// `true` if `element1 == element2`, otherwise `false`.\n///\n/// # Example\n///\n/// ```rhai\n/// fn declining(a, b) { a >= b }\n///\n/// let x = [1, 2, 2, 2, 3, 1, 2, 3, 4, 3, 3, 2, 1];\n///\n/// x.dedup("declining");\n///\n/// print(x);       // prints "[1, 2, 3, 4]"\n/// ```\nfn dedup(array: Array, comparer: String) -> ();\n\n/// Remove duplicated _consecutive_ elements from the array that return `true` when applied the\n/// `comparer` function.\n///\n/// No element is removed if the correct `comparer` function does not exist.\n///\n/// # Function Parameters\n///\n/// * `element1`: copy of the current array element to compare\n/// * `element2`: copy of the next array element to compare\n///\n/// ## Return Value\n///\n/// `true` if `element1 == element2`, otherwise `false`.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 2, 2, 3, 1, 2, 3, 4, 3, 3, 2, 1];\n///\n/// x.dedup(|a, b| a >= b);\n///\n/// print(x);       // prints "[1, 2, 3, 4]"\n/// ```\nfn dedup(array: Array, comparer: FnPtr) -> ();\n\n/// Remove all elements in the array that returns `true` when applied a function named by `filter`\n/// and return them as a new array.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn small(x) { x < 3 }\n///\n/// fn screen(x, i) { x + i > 5 }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.drain("small");\n///\n/// print(x);       // prints "[3, 4, 5]"\n///\n/// print(y);       // prints "[1, 2]"\n///\n/// let z = x.drain("screen");\n///\n/// print(x);       // prints "[3, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn drain(array: Array, filter: String) -> Array;\n\n/// Remove all elements in the array that returns `true` when applied the `filter` function and\n/// return them as a new array.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.drain(|v| v < 3);\n///\n/// print(x);       // prints "[3, 4, 5]"\n///\n/// print(y);       // prints "[1, 2]"\n///\n/// let z = x.drain(|v, i| v + i > 5);\n///\n/// print(x);       // prints "[3, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn drain(array: Array, filter: FnPtr) -> Array;\n\n/// Remove all elements in the array within an exclusive `range` and return them as a new array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.drain(1..3);\n///\n/// print(x);       // prints "[1, 4, 5]"\n///\n/// print(y);       // prints "[2, 3]"\n///\n/// let z = x.drain(2..3);\n///\n/// print(x);       // prints "[1, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn drain(array: Array, range: Range<int>) -> Array;\n\n/// Remove all elements in the array within an inclusive `range` and return them as a new array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.drain(1..=2);\n///\n/// print(x);       // prints "[1, 4, 5]"\n///\n/// print(y);       // prints "[2, 3]"\n///\n/// let z = x.drain(2..=2);\n///\n/// print(x);       // prints "[1, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn drain(array: Array, range: RangeInclusive<int>) -> Array;\n\n/// Remove all bytes in the BLOB within an exclusive `range` and return them as a new BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.drain(1..3);\n///\n/// print(b1);      // prints "[010405]"\n///\n/// print(b2);      // prints "[0203]"\n///\n/// let b3 = b1.drain(2..3);\n///\n/// print(b1);      // prints "[0104]"\n///\n/// print(b3);      // prints "[05]"\n/// ```\nfn drain(blob: Blob, range: Range<int>) -> Blob;\n\n/// Remove all bytes in the BLOB within an inclusive `range` and return them as a new BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.drain(1..=2);\n///\n/// print(b1);      // prints "[010405]"\n///\n/// print(b2);      // prints "[0203]"\n///\n/// let b3 = b1.drain(2..=2);\n///\n/// print(b1);      // prints "[0104]"\n///\n/// print(b3);      // prints "[05]"\n/// ```\nfn drain(blob: Blob, range: RangeInclusive<int>) -> Blob;\n\n/// Remove all elements within a portion of the array and return them as a new array.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, no element is removed and an empty array is returned.\n/// * If `len` ≤ 0, no element is removed and an empty array is returned.\n/// * If `start` position + `len` ≥ length of array, entire portion of the array after the `start` position is removed and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.drain(1, 2);\n///\n/// print(x);       // prints "[1, 4, 5]"\n///\n/// print(y);       // prints "[2, 3]"\n///\n/// let z = x.drain(-1, 1);\n///\n/// print(x);       // prints "[1, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn drain(array: Array, start: int, len: int) -> Array;\n\n/// Remove all bytes within a portion of the BLOB and return them as a new BLOB.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, nothing is removed and an empty BLOB is returned.\n/// * If `len` ≤ 0, nothing is removed and an empty BLOB is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is removed and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.drain(1, 2);\n///\n/// print(b1);      // prints "[010405]"\n///\n/// print(b2);      // prints "[0203]"\n///\n/// let b3 = b1.drain(-1, 1);\n///\n/// print(b3);      // prints "[0104]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn drain(blob: Blob, start: int, len: int) -> Blob;\n\n/// Return the number of seconds between the current system time and the timestamp.\n///\n/// # Example\n///\n/// ```rhai\n/// let now = timestamp();\n///\n/// sleep(10.0);            // sleep for 10 seconds\n///\n/// print(now.elapsed);     // prints 10.???\n/// ```\nfn elapsed(timestamp: Instant) -> RhaiResult;\n\n/// Return the end of the exclusive range.\nfn end(range: ExclusiveRange) -> int;\n\n/// Return the end of the inclusive range.\nfn end(range: InclusiveRange) -> int;\n\n/// Return `true` if the string ends with a specified string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.ends_with("world!"));    // prints true\n///\n/// print(text.ends_with("hello"));     // prints false\n/// ```\nfn ends_with(string: String, match_string: String) -> bool;\n\n/// Return the exponential of the decimal number.\nfn exp(x: Decimal) -> Decimal;\n\n/// Return the exponential of the floating-point number.\nfn exp(x: float) -> float;\n\n/// Copy an exclusive range of the array and return it as a new array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// print(x.extract(1..3));     // prints "[2, 3]"\n///\n/// print(x);                   // prints "[1, 2, 3, 4, 5]"\n/// ```\nfn extract(array: Array, range: Range<int>) -> Array;\n\n/// Copy an inclusive range of the array and return it as a new array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// print(x.extract(1..=3));    // prints "[2, 3, 4]"\n///\n/// print(x);                   // prints "[1, 2, 3, 4, 5]"\n/// ```\nfn extract(array: Array, range: RangeInclusive<int>) -> Array;\n\n/// Copy a portion of the array beginning at the `start` position till the end and return it as\n/// a new array.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, the entire array is copied and returned.\n/// * If `start` ≥ length of array, an empty array is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// print(x.extract(2));        // prints "[3, 4, 5]"\n///\n/// print(x.extract(-3));       // prints "[3, 4, 5]"\n///\n/// print(x);                   // prints "[1, 2, 3, 4, 5]"\n/// ```\nfn extract(array: Array, start: int) -> Array;\n\n/// Copy an exclusive `range` of the BLOB and return it as a new BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.extract(1..3));     // prints "[0203]"\n///\n/// print(b);                   // prints "[0102030405]"\n/// ```\nfn extract(blob: Blob, range: Range<int>) -> Blob;\n\n/// Copy an inclusive `range` of the BLOB and return it as a new BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.extract(1..=3));    // prints "[020304]"\n///\n/// print(b);                   // prints "[0102030405]"\n/// ```\nfn extract(blob: Blob, range: RangeInclusive<int>) -> Blob;\n\n/// Copy a portion of the BLOB beginning at the `start` position till the end and return it as\n/// a new BLOB.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, the entire BLOB is copied and returned.\n/// * If `start` ≥ length of BLOB, an empty BLOB is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.extract(2));        // prints "[030405]"\n///\n/// print(b.extract(-3));       // prints "[030405]"\n///\n/// print(b);                   // prints "[0102030405]"\n/// ```\nfn extract(blob: Blob, start: int) -> Blob;\n\n/// Copy a portion of the array and return it as a new array.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, an empty array is returned.\n/// * If `len` ≤ 0, an empty array is returned.\n/// * If `start` position + `len` ≥ length of array, entire portion of the array after the `start` position is copied and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// print(x.extract(1, 3));     // prints "[2, 3, 4]"\n///\n/// print(x.extract(-3, 2));    // prints "[3, 4]"\n///\n/// print(x);                   // prints "[1, 2, 3, 4, 5]"\n/// ```\nfn extract(array: Array, start: int, len: int) -> Array;\n\n/// Copy a portion of the BLOB and return it as a new BLOB.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, an empty BLOB is returned.\n/// * If `len` ≤ 0, an empty BLOB is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is copied and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.extract(1, 3));     // prints "[020303]"\n///\n/// print(b.extract(-3, 2));    // prints "[0304]"\n///\n/// print(b);                   // prints "[0102030405]"\n/// ```\nfn extract(blob: Blob, start: int, len: int) -> Blob;\n\n/// Add all property values of another object map into the object map.\n/// Only properties that do not originally exist in the object map are added.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n/// let n = #{a: 42, d:0};\n///\n/// m.fill_with(n);\n///\n/// print(m);       // prints "#{a:1, b:2, c:3, d:0}"\n/// ```\nfn fill_with(map: Map, map2: Map) -> ();\n\n/// Iterate through all the elements in the array, applying a `filter` function to each element\n/// in turn, and return a copy of all elements (in order) that return `true` as a new array.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.filter(|v| v >= 3);\n///\n/// print(y);       // prints "[3, 4, 5]"\n///\n/// let y = x.filter(|v, i| v * i >= 10);\n///\n/// print(y);       // prints "[12, 20]"\n/// ```\nfn filter(array: Array, filter: FnPtr) -> Array;\n\n/// Iterate through all the elements in the array, applying a function named by `filter` to each\n/// element in turn, and return a copy of all elements (in order) that return `true` as a new array.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn screen(x, i) { x * i >= 10 }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.filter("is_odd");\n///\n/// print(y);       // prints "[1, 3, 5]"\n///\n/// let y = x.filter("screen");\n///\n/// print(y);       // prints "[12, 20]"\n/// ```\nfn filter(array: Array, filter_func: String) -> Array;\n\n/// Return the largest whole number less than or equals to the decimal number.\nfn floor(x: Decimal) -> Decimal;\n\n/// Return the largest whole number less than or equals to the floating-point number.\nfn floor(x: float) -> float;\n\n/// Return the fractional part of the decimal number.\nfn fraction(x: Decimal) -> Decimal;\n\n/// Return the fractional part of the floating-point number.\nfn fraction(x: float) -> float;\n\n/// Get a copy of the element at the `index` position in the array.\n///\n/// * If `index` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `index` < -length of array, `()` is returned.\n/// * If `index` ≥ length of array, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// print(x.get(0));        // prints 1\n///\n/// print(x.get(-1));       // prints 3\n///\n/// print(x.get(99));       // prints empty (for \'()\')\n/// ```\nfn get(array: Array, index: int) -> ?;\n\n/// Get the byte value at the `index` position in the BLOB.\n///\n/// * If `index` < 0, position counts from the end of the BLOB (`-1` is the last element).\n/// * If `index` < -length of BLOB, zero is returned.\n/// * If `index` ≥ length of BLOB, zero is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.get(0));        // prints 1\n///\n/// print(b.get(-1));       // prints 5\n///\n/// print(b.get(99));       // prints 0\n/// ```\nfn get(blob: Blob, index: int) -> int;\n\n/// Get the value of the `property` in the object map and return a copy.\n///\n/// If `property` does not exist in the object map, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a: 1, b: 2, c: 3};\n///\n/// print(m.get("b"));      // prints 2\n///\n/// print(m.get("x"));      // prints empty (for \'()\')\n/// ```\nfn get(map: Map, property: String) -> ?;\n\n/// Get the character at the `index` position in the string.\n///\n/// * If `index` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `index` < -length of string, zero is returned.\n/// * If `index` ≥ length of string, zero is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.get(0));     // prints \'h\'\n///\n/// print(text.get(-1));    // prints \'!\'\n///\n/// print(text.get(99));    // prints empty (for \'()\')\'\n/// ```\nfn get(string: String, index: int) -> ?;\n\n/// Return an iterator over all the bits in the number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// for bit in x.bits {\n///     print(bit);\n/// }\n/// ```\nfn get bits(value: int) -> Iterator<bool>;\n\n/// Return the length of the string, in number of bytes used to store it in UTF-8 encoding.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "朝には紅顔ありて夕べには白骨となる";\n///\n/// print(text.bytes);      // prints 51\n/// ```\nfn get bytes(string: String) -> int;\n\n/// Return the smallest whole number larger than or equals to the decimal number.\nfn get ceiling(x: Decimal) -> Decimal;\n\n/// Return the smallest whole number larger than or equals to the floating-point number.\nfn get ceiling(x: float) -> float;\n\n/// Return an iterator over all the characters in the string.\n///\n/// # Example\n///\n/// ```rhai\n/// for ch in "hello, world!".chars {\n///     print(ch);\n/// }\n/// ```\nfn get chars(string: String) -> Iterator<char>;\n\n/// Return the number of seconds between the current system time and the timestamp.\n///\n/// # Example\n///\n/// ```rhai\n/// let now = timestamp();\n///\n/// sleep(10.0);            // sleep for 10 seconds\n///\n/// print(now.elapsed);     // prints 10.???\n/// ```\nfn get elapsed(timestamp: Instant) -> RhaiResult;\n\n/// Return the end of the exclusive range.\nfn get end(range: ExclusiveRange) -> int;\n\n/// Return the end of the inclusive range.\nfn get end(range: InclusiveRange) -> int;\n\n/// Return the largest whole number less than or equals to the decimal number.\nfn get floor(x: Decimal) -> Decimal;\n\n/// Return the largest whole number less than or equals to the floating-point number.\nfn get floor(x: float) -> float;\n\n/// Return the fractional part of the decimal number.\nfn get fraction(x: Decimal) -> Decimal;\n\n/// Return the fractional part of the floating-point number.\nfn get fraction(x: float) -> float;\n\n/// Return the integral part of the decimal number.\nfn get int(x: Decimal) -> Decimal;\n\n/// Return the integral part of the floating-point number.\nfn get int(x: float) -> float;\n\n/// Return `true` if the function is an anonymous function.\n///\n/// # Example\n///\n/// ```rhai\n/// let f = |x| x * 2;\n///\n/// print(f.is_anonymous);      // prints true\n/// ```\nfn get is_anonymous(fn_ptr: FnPtr) -> bool;\n\n/// Return true if the array is empty.\nfn get is_empty(array: Array) -> bool;\n\n/// Return true if the BLOB is empty.\nfn get is_empty(blob: Blob) -> bool;\n\n/// Return true if the range contains no items.\nfn get is_empty(range: ExclusiveRange) -> bool;\n\n/// Return true if the range contains no items.\nfn get is_empty(range: InclusiveRange) -> bool;\n\n/// Return true if the string is empty.\nfn get is_empty(string: String) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: int) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: i128) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: i16) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: i32) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: i8) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: u128) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: u16) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: u32) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: u64) -> bool;\n\n/// Return true if the number is even.\nfn get is_even(x: u8) -> bool;\n\n/// Return `true` if the range is exclusive.\nfn get is_exclusive(range: ExclusiveRange) -> bool;\n\n/// Return `true` if the range is exclusive.\nfn get is_exclusive(range: InclusiveRange) -> bool;\n\n/// Return `true` if the floating-point number is finite.\nfn get is_finite(x: float) -> bool;\n\n/// Return `true` if the range is inclusive.\nfn get is_inclusive(range: ExclusiveRange) -> bool;\n\n/// Return `true` if the range is inclusive.\nfn get is_inclusive(range: InclusiveRange) -> bool;\n\n/// Return `true` if the floating-point number is infinite.\nfn get is_infinite(x: float) -> bool;\n\n/// Return `true` if the floating-point number is `NaN` (Not A Number).\nfn get is_nan(x: float) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: int) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: i128) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: i16) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: i32) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: i8) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: u128) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: u16) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: u32) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: u64) -> bool;\n\n/// Return true if the number is odd.\nfn get is_odd(x: u8) -> bool;\n\n/// Return true if the decimal number is zero.\nfn get is_zero(x: Decimal) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: int) -> bool;\n\n/// Return true if the floating-point number is zero.\nfn get is_zero(x: f32) -> bool;\n\n/// Return true if the floating-point number is zero.\nfn get is_zero(x: float) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: i128) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: i16) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: i32) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: i8) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: u128) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: u16) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: u32) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: u64) -> bool;\n\n/// Return true if the number is zero.\nfn get is_zero(x: u8) -> bool;\n\n/// Number of elements in the array.\nfn get len(array: Array) -> int;\n\n/// Return the length of the BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(10, 0x42);\n///\n/// print(b);           // prints "[4242424242424242 4242]"\n///\n/// print(b.len());     // prints 10\n/// ```\nfn get len(blob: Blob) -> int;\n\n/// Return the length of the string, in number of characters.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "朝には紅顔ありて夕べには白骨となる";\n///\n/// print(text.len);        // prints 17\n/// ```\nfn get len(string: String) -> int;\n\n/// Return the name of the function.\n///\n/// # Example\n///\n/// ```rhai\n/// fn double(x) { x * 2 }\n///\n/// let f = Fn("double");\n///\n/// print(f.name);      // prints "double"\n/// ```\nfn get name(fn_ptr: FnPtr) -> String;\n\n/// Return the nearest whole number closest to the decimal number.\n/// Always round mid-point towards the closest even number.\nfn get round(x: Decimal) -> Decimal;\n\n/// Return the nearest whole number closest to the floating-point number.\n/// Rounds away from zero.\nfn get round(x: float) -> float;\n\n/// Return the start of the exclusive range.\nfn get start(range: ExclusiveRange) -> int;\n\n/// Return the start of the inclusive range.\nfn get start(range: InclusiveRange) -> int;\n\n/// Return the _tag_ of a `Dynamic` value.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = "hello, world!";\n///\n/// x.tag = 42;\n///\n/// print(x.tag);           // prints 42\n/// ```\nfn get tag(value: ?) -> int;\n\n/// Return `true` if the specified `bit` in the number is set.\n///\n/// If `bit` < 0, position counts from the MSB (Most Significant Bit).\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// print(x.get_bit(5));    // prints false\n///\n/// print(x.get_bit(6));    // prints true\n///\n/// print(x.get_bit(-48));  // prints true on 64-bit\n/// ```\nfn get_bit(value: int, bit: int) -> bool;\n\n/// Return an exclusive range of bits in the number as a new number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// print(x.get_bits(5..10));       // print 18\n/// ```\nfn get_bits(value: int, range: Range<int>) -> int;\n\n/// Return an inclusive range of bits in the number as a new number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// print(x.get_bits(5..=9));       // print 18\n/// ```\nfn get_bits(value: int, range: RangeInclusive<int>) -> int;\n\n/// Return a portion of bits in the number as a new number.\n///\n/// * If `start` < 0, position counts from the MSB (Most Significant Bit).\n/// * If `bits` ≤ 0, zero is returned.\n/// * If `start` position + `bits` ≥ total number of bits, the bits after the `start` position are returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// print(x.get_bits(5, 8));        // print 18\n/// ```\nfn get_bits(value: int, start: int, bits: int) -> int;\n\nfn get_fn_metadata_list() -> Array;\n\nfn get_fn_metadata_list(name: String) -> Array;\n\nfn get_fn_metadata_list(name: String, params: int) -> Array;\n\n/// Return the hypotenuse of a triangle with sides `x` and `y`.\nfn hypot(x: float, y: float) -> float;\n\n/// Iterate through all the elements in the array, applying a function named by `filter` to each\n/// element in turn, and return the index of the first element that returns `true`.\n/// If no element returns `true`, `-1` is returned.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn is_special(x) { x > 3 }\n///\n/// fn is_dumb(x) { x > 8 }\n///\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.index_of("is_special"));    // prints 3\n///\n/// print(x.index_of("is_dumb"));       // prints -1\n/// ```\nfn index_of(array: Array, filter: String) -> int;\n\n/// Iterate through all the elements in the array, applying a `filter` function to each element\n/// in turn, and return the index of the first element that returns `true`.\n/// If no element returns `true`, `-1` is returned.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.index_of(|v| v > 3));           // prints 3: 4 > 3\n///\n/// print(x.index_of(|v| v > 8));           // prints -1: nothing is > 8\n///\n/// print(x.index_of(|v, i| v * i > 20));   // prints 7: 4 * 7 > 20\n/// ```\nfn index_of(array: Array, filter: FnPtr) -> int;\n\n/// Find the first element in the array that equals a particular `value` and return its index.\n/// If no element equals `value`, `-1` is returned.\n///\n/// The operator `==` is used to compare elements with `value` and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.index_of(4));       // prints 3 (first index)\n///\n/// print(x.index_of(9));       // prints -1\n///\n/// print(x.index_of("foo"));   // prints -1: strings do not equal numbers\n/// ```\nfn index_of(array: Array, value: ?) -> int;\n\n/// Find the specified `character` in the string and return the first index where it is found.\n/// If the `character` is not found, `-1` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.index_of(\'l\'));      // prints 2 (first index)\n///\n/// print(text.index_of(\'x\'));      // prints -1\n/// ```\nfn index_of(string: String, character: char) -> int;\n\n/// Find the specified `character` in the string and return the first index where it is found.\n/// If the `character` is not found, `-1` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// print(text.index_of("ll"));     // prints 2 (first index)\n///\n/// print(text.index_of("xx:));     // prints -1\n/// ```\nfn index_of(string: String, find_string: String) -> int;\n\n/// Iterate through all the elements in the array, starting from a particular `start` position,\n/// applying a function named by `filter` to each element in turn, and return the index of the\n/// first element that returns `true`. If no element returns `true`, `-1` is returned.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, `-1` is returned.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn plural(x) { x > 1 }\n///\n/// fn singular(x) { x < 2 }\n///\n/// fn screen(x, i) { x * i > 20 }\n///\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.index_of("plural", 3));     // prints 5: 2 > 1\n///\n/// print(x.index_of("singular", 9));   // prints -1: nothing < 2 past index 9\n///\n/// print(x.index_of("plural", 15));    // prints -1: nothing found past end of array\n///\n/// print(x.index_of("plural", -5));    // prints 9: -5 = start from index 8\n///\n/// print(x.index_of("plural", -99));   // prints 1: -99 = start from beginning\n///\n/// print(x.index_of("screen", 8));     // prints 10: 3 * 10 > 20\n/// ```\nfn index_of(array: Array, filter: String, start: int) -> int;\n\n/// Iterate through all the elements in the array, starting from a particular `start` position,\n/// applying a `filter` function to each element in turn, and return the index of the first\n/// element that returns `true`. If no element returns `true`, `-1` is returned.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, `-1` is returned.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.index_of(|v| v > 1, 3));    // prints 5: 2 > 1\n///\n/// print(x.index_of(|v| v < 2, 9));    // prints -1: nothing < 2 past index 9\n///\n/// print(x.index_of(|v| v > 1, 15));   // prints -1: nothing found past end of array\n///\n/// print(x.index_of(|v| v > 1, -5));   // prints 9: -5 = start from index 8\n///\n/// print(x.index_of(|v| v > 1, -99));  // prints 1: -99 = start from beginning\n///\n/// print(x.index_of(|v, i| v * i > 20, 8));    // prints 10: 3 * 10 > 20\n/// ```\nfn index_of(array: Array, filter: FnPtr, start: int) -> int;\n\n/// Find the first element in the array, starting from a particular `start` position, that\n/// equals a particular `value` and return its index. If no element equals `value`, `-1` is returned.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, `-1` is returned.\n///\n/// The operator `==` is used to compare elements with `value` and must be defined,\n/// otherwise `false` is assumed.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.index_of(4, 2));        // prints 3\n///\n/// print(x.index_of(4, 5));        // prints 7\n///\n/// print(x.index_of(4, 15));       // prints -1: nothing found past end of array\n///\n/// print(x.index_of(4, -5));       // prints 11: -5 = start from index 8\n///\n/// print(x.index_of(9, 1));        // prints -1: nothing equals 9\n///\n/// print(x.index_of("foo", 1));    // prints -1: strings do not equal numbers\n/// ```\nfn index_of(array: Array, value: ?, start: int) -> int;\n\n/// Find the specified `character` in the string, starting from the specified `start` position,\n/// and return the first index where it is found.\n/// If the `character` is not found, `-1` is returned.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, position counts from the beginning of the string.\n/// * If `start` ≥ length of string, `-1` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.index_of(\'l\', 5));       // prints 10 (first index after 5)\n///\n/// print(text.index_of(\'o\', -7));      // prints 8\n///\n/// print(text.index_of(\'x\', 0));       // prints -1\n/// ```\nfn index_of(string: String, character: char, start: int) -> int;\n\n/// Find the specified sub-string in the string, starting from the specified `start` position,\n/// and return the first index where it is found.\n/// If the sub-string is not found, `-1` is returned.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, position counts from the beginning of the string.\n/// * If `start` ≥ length of string, `-1` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// print(text.index_of("ll", 5));      // prints 16 (first index after 5)\n///\n/// print(text.index_of("ll", -15));    // prints 16\n///\n/// print(text.index_of("xx", 0));      // prints -1\n/// ```\nfn index_of(string: String, find_string: String, start: int) -> int;\n\n/// Add a new element into the array at a particular `index` position.\n///\n/// * If `index` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `index` < -length of array, the element is added to the beginning of the array.\n/// * If `index` ≥ length of array, the element is appended to the end of the array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// x.insert(0, "hello");\n///\n/// x.insert(2, true);\n///\n/// x.insert(-2, 42);\n///\n/// print(x);       // prints ["hello", 1, true, 2, 42, 3]\n/// ```\nfn insert(array: Array, index: int, item: ?) -> ();\n\n/// Add a byte `value` to the BLOB at a particular `index` position.\n///\n/// * If `index` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `index` < -length of BLOB, the byte value is added to the beginning of the BLOB.\n/// * If `index` ≥ length of BLOB, the byte value is appended to the end of the BLOB.\n///\n/// Only the lower 8 bits of the `value` are used; all other bits are ignored.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(5, 0x42);\n///\n/// b.insert(2, 0x18);\n///\n/// print(b);       // prints "[4242184242]"\n/// ```\nfn insert(blob: Blob, index: int, value: int) -> ();\n\n/// Return the integral part of the decimal number.\nfn int(x: Decimal) -> Decimal;\n\n/// Return the integral part of the floating-point number.\nfn int(x: float) -> float;\n\n/// Return `true` if the function is an anonymous function.\n///\n/// # Example\n///\n/// ```rhai\n/// let f = |x| x * 2;\n///\n/// print(f.is_anonymous);      // prints true\n/// ```\nfn is_anonymous(fn_ptr: FnPtr) -> bool;\n\n/// Return true if the array is empty.\nfn is_empty(array: Array) -> bool;\n\n/// Return true if the BLOB is empty.\nfn is_empty(blob: Blob) -> bool;\n\n/// Return true if the map is empty.\nfn is_empty(map: Map) -> bool;\n\n/// Return true if the range contains no items.\nfn is_empty(range: ExclusiveRange) -> bool;\n\n/// Return true if the range contains no items.\nfn is_empty(range: InclusiveRange) -> bool;\n\n/// Return true if the string is empty.\nfn is_empty(string: String) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: int) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: i128) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: i16) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: i32) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: i8) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: u128) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: u16) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: u32) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: u64) -> bool;\n\n/// Return true if the number is even.\nfn is_even(x: u8) -> bool;\n\n/// Return `true` if the range is exclusive.\nfn is_exclusive(range: ExclusiveRange) -> bool;\n\n/// Return `true` if the range is exclusive.\nfn is_exclusive(range: InclusiveRange) -> bool;\n\n/// Return `true` if the floating-point number is finite.\nfn is_finite(x: float) -> bool;\n\n/// Return `true` if the range is inclusive.\nfn is_inclusive(range: ExclusiveRange) -> bool;\n\n/// Return `true` if the range is inclusive.\nfn is_inclusive(range: InclusiveRange) -> bool;\n\n/// Return `true` if the floating-point number is infinite.\nfn is_infinite(x: float) -> bool;\n\n/// Return `true` if the floating-point number is `NaN` (Not A Number).\nfn is_nan(x: float) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: int) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: i128) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: i16) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: i32) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: i8) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: u128) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: u16) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: u32) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: u64) -> bool;\n\n/// Return true if the number is odd.\nfn is_odd(x: u8) -> bool;\n\n/// Return true if the decimal number is zero.\nfn is_zero(x: Decimal) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: int) -> bool;\n\n/// Return true if the floating-point number is zero.\nfn is_zero(x: f32) -> bool;\n\n/// Return true if the floating-point number is zero.\nfn is_zero(x: float) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: i128) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: i16) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: i32) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: i8) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: u128) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: u16) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: u32) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: u64) -> bool;\n\n/// Return true if the number is zero.\nfn is_zero(x: u8) -> bool;\n\n/// Return an array with all the property names in the object map.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n///\n/// print(m.keys());        // prints ["a", "b", "c"]\n/// ```\nfn keys(map: Map) -> Array;\n\n/// Number of elements in the array.\nfn len(array: Array) -> int;\n\n/// Return the length of the BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(10, 0x42);\n///\n/// print(b);           // prints "[4242424242424242 4242]"\n///\n/// print(b.len());     // prints 10\n/// ```\nfn len(blob: Blob) -> int;\n\n/// Return the number of properties in the object map.\nfn len(map: Map) -> int;\n\n/// Return the length of the string, in number of characters.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "朝には紅顔ありて夕べには白骨となる";\n///\n/// print(text.len);        // prints 17\n/// ```\nfn len(string: String) -> int;\n\n/// Return the natural log of the decimal number.\nfn ln(x: Decimal) -> Decimal;\n\n/// Return the natural log of the floating-point number.\nfn ln(x: float) -> float;\n\n/// Return the log of the decimal number with base 10.\nfn log(x: Decimal) -> Decimal;\n\n/// Return the log of the floating-point number with base 10.\nfn log(x: float) -> float;\n\n/// Return the log of the floating-point number with `base`.\nfn log(x: float, base: float) -> float;\n\n/// Convert the character to lower-case.\n///\n/// # Example\n///\n/// ```rhai\n/// let ch = \'A\';\n///\n/// ch.make_lower();\n///\n/// print(ch);          // prints \'a\'\n/// ```\nfn make_lower(character: char) -> ();\n\n/// Convert the string to all lower-case.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "HELLO, WORLD!"\n///\n/// text.make_lower();\n///\n/// print(text);        // prints "hello, world!";\n/// ```\nfn make_lower(string: String) -> ();\n\n/// Convert the character to upper-case.\n///\n/// # Example\n///\n/// ```rhai\n/// let ch = \'a\';\n///\n/// ch.make_upper();\n///\n/// print(ch);          // prints \'A\'\n/// ```\nfn make_upper(character: char) -> ();\n\n/// Convert the string to all upper-case.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!"\n///\n/// text.make_upper();\n///\n/// print(text);        // prints "HELLO, WORLD!";\n/// ```\nfn make_upper(string: String) -> ();\n\n/// Iterate through all the elements in the array, applying a function named by `mapper` to each\n/// element in turn, and return the results as a new array.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `mapper` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn square(x) { x * x }\n///\n/// fn multiply(x, i) { x * i }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.map("square");\n///\n/// print(y);       // prints "[1, 4, 9, 16, 25]"\n///\n/// let y = x.map("multiply");\n///\n/// print(y);       // prints "[0, 2, 6, 12, 20]"\n/// ```\nfn map(array: Array, mapper: String) -> Array;\n\n/// Iterate through all the elements in the array, applying a `mapper` function to each element\n/// in turn, and return the results as a new array.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.map(|v| v * v);\n///\n/// print(y);       // prints "[1, 4, 9, 16, 25]"\n///\n/// let y = x.map(|v, i| v * i);\n///\n/// print(y);       // prints "[0, 2, 6, 12, 20]"\n/// ```\nfn map(array: Array, mapper: FnPtr) -> Array;\n\n/// Add all property values of another object map into the object map.\n/// Existing property values of the same names are replaced.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n/// let n = #{a: 42, d:0};\n///\n/// m.mixin(n);\n///\n/// print(m);       // prints "#{a:42, b:2, c:3, d:0}"\n/// ```\nfn mixin(map: Map, map2: Map) -> ();\n\n/// Return the name of the function.\n///\n/// # Example\n///\n/// ```rhai\n/// fn double(x) { x * 2 }\n///\n/// let f = Fn("double");\n///\n/// print(f.name);      // prints "double"\n/// ```\nfn name(fn_ptr: FnPtr) -> String;\n\n/// Pad the array to at least the specified length with copies of a specified element.\n///\n/// If `len` ≤ length of array, no padding is done.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// x.pad(5, 42);\n///\n/// print(x);       // prints "[1, 2, 3, 42, 42]"\n///\n/// x.pad(3, 123);\n///\n/// print(x);       // prints "[1, 2, 3, 42, 42]"\n/// ```\nfn pad(array: Array, len: int, item: ?) -> ();\n\n/// Pad the BLOB to at least the specified length with copies of a specified byte `value`.\n///\n/// If `len` ≤ length of BLOB, no padding is done.\n///\n/// Only the lower 8 bits of the `value` are used; all other bits are ignored.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(3, 0x42);\n///\n/// b.pad(5, 0x18)\n///\n/// print(b);               // prints "[4242421818]"\n///\n/// b.pad(3, 0xab)\n///\n/// print(b);               // prints "[4242421818]"\n/// ```\nfn pad(blob: Blob, len: int, value: int) -> ();\n\n/// Pad the string to at least the specified number of characters with the specified `character`.\n///\n/// If `len` ≤ length of string, no padding is done.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello";\n///\n/// text.pad(8, \'!\');\n///\n/// print(text);        // prints "hello!!!"\n///\n/// text.pad(5, \'*\');\n///\n/// print(text);        // prints "hello!!!"\n/// ```\nfn pad(string: String, len: int, character: char) -> ();\n\n/// Pad the string to at least the specified number of characters with the specified string.\n///\n/// If `len` ≤ length of string, no padding is done.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello";\n///\n/// text.pad(10, "(!)");\n///\n/// print(text);        // prints "hello(!)(!)"\n///\n/// text.pad(8, \'***\');\n///\n/// print(text);        // prints "hello(!)(!)"\n/// ```\nfn pad(string: String, len: int, padding: String) -> ();\n\n/// Parse the bytes within an exclusive `range` in the BLOB as a `FLOAT`\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes are ignored.\nfn parse_be_float(blob: Blob, range: Range<int>) -> float;\n\n/// Parse the bytes within an inclusive `range` in the BLOB as a `FLOAT`\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes are ignored.\nfn parse_be_float(blob: Blob, range: RangeInclusive<int>) -> float;\n\n/// Parse the bytes beginning at the `start` position in the BLOB as a `FLOAT`\n/// in big-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in range < number of bytes for `FLOAT`, zeros are padded.\n/// * If number of bytes in range > number of bytes for `FLOAT`, extra bytes are ignored.\nfn parse_be_float(blob: Blob, start: int, len: int) -> float;\n\n/// Parse the bytes within an exclusive `range` in the BLOB as an `INT`\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes are ignored.\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// let x = b.parse_be_int(1..3);   // parse two bytes\n///\n/// print(x.to_hex());              // prints "02030000...00"\n/// ```\nfn parse_be_int(blob: Blob, range: Range<int>) -> int;\n\n/// Parse the bytes within an inclusive `range` in the BLOB as an `INT`\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes are ignored.\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// let x = b.parse_be_int(1..=3);  // parse three bytes\n///\n/// print(x.to_hex());              // prints "0203040000...00"\n/// ```\nfn parse_be_int(blob: Blob, range: RangeInclusive<int>) -> int;\n\n/// Parse the bytes beginning at the `start` position in the BLOB as an `INT`\n/// in big-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in range < number of bytes for `INT`, zeros are padded.\n/// * If number of bytes in range > number of bytes for `INT`, extra bytes are ignored.\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// let x = b.parse_be_int(1, 2);\n///\n/// print(x.to_hex());      // prints "02030000...00"\n/// ```\nfn parse_be_int(blob: Blob, start: int, len: int) -> int;\n\n/// Parse a string into a decimal number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = parse_decimal("123.456");\n///\n/// print(x);       // prints 123.456\n/// ```\nfn parse_decimal(string: String) -> Decimal;\n\n/// Parse a string into a floating-point number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = parse_int("123.456");\n///\n/// print(x);       // prints 123.456\n/// ```\nfn parse_float(string: String) -> float;\n\n/// Parse a string into an integer number.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = parse_int("123");\n///\n/// print(x);       // prints 123\n/// ```\nfn parse_int(string: String) -> int;\n\n/// Parse a string into an integer number of the specified `radix`.\n///\n/// `radix` must be between 2 and 36.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = parse_int("123");\n///\n/// print(x);       // prints 123\n///\n/// let y = parse_int("123abc", 16);\n///\n/// print(y);       // prints 1194684 (0x123abc)\n/// ```\nfn parse_int(string: String, radix: int) -> int;\n\n/// Parse the bytes within an exclusive `range` in the BLOB as a `FLOAT`\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes are ignored.\nfn parse_le_float(blob: Blob, range: Range<int>) -> float;\n\n/// Parse the bytes within an inclusive `range` in the BLOB as a `FLOAT`\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes are ignored.\nfn parse_le_float(blob: Blob, range: RangeInclusive<int>) -> float;\n\n/// Parse the bytes beginning at the `start` position in the BLOB as a `FLOAT`\n/// in little-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in range < number of bytes for `FLOAT`, zeros are padded.\n/// * If number of bytes in range > number of bytes for `FLOAT`, extra bytes are ignored.\nfn parse_le_float(blob: Blob, start: int, len: int) -> float;\n\n/// Parse the bytes within an exclusive `range` in the BLOB as an `INT`\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes are ignored.\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// let x = b.parse_le_int(1..3);   // parse two bytes\n///\n/// print(x.to_hex());              // prints "0302"\n/// ```\nfn parse_le_int(blob: Blob, range: Range<int>) -> int;\n\n/// Parse the bytes within an inclusive `range` in the BLOB as an `INT`\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, zeros are padded.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes are ignored.\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// let x = b.parse_le_int(1..=3);  // parse three bytes\n///\n/// print(x.to_hex());              // prints "040302"\n/// ```\nfn parse_le_int(blob: Blob, range: RangeInclusive<int>) -> int;\n\n/// Parse the bytes beginning at the `start` position in the BLOB as an `INT`\n/// in little-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in range < number of bytes for `INT`, zeros are padded.\n/// * If number of bytes in range > number of bytes for `INT`, extra bytes are ignored.\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// let x = b.parse_le_int(1, 2);\n///\n/// print(x.to_hex());      // prints "0302"\n/// ```\nfn parse_le_int(blob: Blob, start: int, len: int) -> int;\n\n/// Remove the last element from the array and return it.\n///\n/// If the array is empty, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// print(x.pop());     // prints 3\n///\n/// print(x);           // prints "[1, 2]"\n/// ```\nfn pop(array: Array) -> ?;\n\n/// Remove the last byte from the BLOB and return it.\n///\n/// If the BLOB is empty, zero is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.pop());         // prints 5\n///\n/// print(b);               // prints "[01020304]"\n/// ```\nfn pop(blob: Blob) -> int;\n\n/// Remove the last character from the string and return it.\n///\n/// If the string is empty, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.pop());      // prints \'!\'\n///\n/// print(text);            // prints "hello, world"\n/// ```\nfn pop(string: String) -> ?;\n\n/// Remove a specified number of characters from the end of the string and return it as a\n/// new string.\n///\n/// * If `len` ≤ 0, the string is not modified and an empty string is returned.\n/// * If `len` ≥ length of string, the string is cleared and the entire string returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.pop(4));     // prints "rld!"\n///\n/// print(text);            // prints "hello, wo"\n/// ```\nfn pop(string: String, len: int) -> String;\n\n/// Return the empty string.\nfn print() -> String;\n\n/// Convert the array into a string.\nfn print(array: Array) -> String;\n\n/// Return the character into a string.\nfn print(character: char) -> String;\n\n/// Convert the value of the `item` into a string.\nfn print(item: ?) -> String;\n\n/// Convert the object map into a string.\nfn print(map: Map) -> String;\n\n/// Convert the value of `number` into a string.\nfn print(number: f32) -> String;\n\n/// Convert the value of `number` into a string.\nfn print(number: float) -> String;\n\n/// Return the `string`.\nfn print(string: String) -> String;\n\n/// Return the empty string.\nfn print(unit: ()) -> String;\n\n/// Return the boolean value into a string.\nfn print(value: bool) -> String;\n\n/// Add a new element, which is not another array, to the end of the array.\n///\n/// If `item` is `Array`, then `append` is more specific and will be called instead.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// x.push("hello");\n///\n/// print(x);       // prints [1, 2, 3, "hello"]\n/// ```\nfn push(array: Array, item: ?) -> ();\n\n/// Add a new byte `value` to the end of the BLOB.\n///\n/// Only the lower 8 bits of the `value` are used; all other bits are ignored.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b.push(0x42);\n///\n/// print(b);       // prints "[42]"\n/// ```\nfn push(blob: Blob, value: int) -> ();\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i128, to: i128) -> Iterator<i128>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i16, to: i16) -> Iterator<i16>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i32, to: i32) -> Iterator<i32>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: int, to: int) -> Iterator<int>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i8, to: i8) -> Iterator<i8>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u128, to: u128) -> Iterator<u128>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u16, to: u16) -> Iterator<u16>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u32, to: u32) -> Iterator<u32>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u64, to: u64) -> Iterator<u64>;\n\n/// Return an iterator over the exclusive range of `from..to`.\n/// The value `to` is never included.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17\n/// for n in range(8, 18) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u8, to: u8) -> Iterator<u8>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<Decimal>, step: Decimal) -> Iterator<Decimal>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<float>, step: float) -> Iterator<float>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<i128>, step: i128) -> Iterator<i128>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<i16>, step: i16) -> Iterator<i16>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<i32>, step: i32) -> Iterator<i32>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<int>, step: int) -> Iterator<int>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<i8>, step: i8) -> Iterator<i8>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<u128>, step: u128) -> Iterator<u128>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<u16>, step: u16) -> Iterator<u16>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<u32>, step: u32) -> Iterator<u32>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<u64>, step: u64) -> Iterator<u64>;\n\n/// Return an iterator over an exclusive range, each iteration increasing by `step`.\n///\n/// If `range` is reversed and `step` < 0, iteration goes backwards.\n///\n/// Otherwise, if `range` is empty, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8..18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18..8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(range: Range<u8>, step: u8) -> Iterator<u8>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: Decimal, to: Decimal, step: Decimal) -> Iterator<Decimal>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: float, to: float, step: float) -> Iterator<float>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i128, to: i128, step: i128) -> Iterator<i128>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i16, to: i16, step: i16) -> Iterator<i16>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i32, to: i32, step: i32) -> Iterator<i32>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: int, to: int, step: int) -> Iterator<int>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: i8, to: i8, step: i8) -> Iterator<i8>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u128, to: u128, step: u128) -> Iterator<u128>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u16, to: u16, step: u16) -> Iterator<u16>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u32, to: u32, step: u32) -> Iterator<u32>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u64, to: u64, step: u64) -> Iterator<u64>;\n\n/// Return an iterator over the exclusive range of `from..to`, each iteration increasing by `step`.\n/// The value `to` is never included.\n///\n/// If `from` > `to` and `step` < 0, iteration goes backwards.\n///\n/// If `from` > `to` and `step` > 0 or `from` < `to` and `step` < 0, an empty iterator is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// // prints all values from 8 to 17 in steps of 3\n/// for n in range(8, 18, 3) {\n///     print(n);\n/// }\n///\n/// // prints all values down from 18 to 9 in steps of -3\n/// for n in range(18, 8, -3) {\n///     print(n);\n/// }\n/// ```\nfn range(from: u8, to: u8, step: u8) -> Iterator<u8>;\n\n/// Reduce an array by iterating through all elements while applying a function named by `reducer`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `reducer` must exist taking these parameters:\n///\n/// * `result`: accumulated result, initially `()`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn process(r, x) {\n///     x + (r ?? 0)\n/// }\n/// fn process_extra(r, x, i) {\n///     x + i + (r ?? 0)\n/// }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce("process");\n///\n/// print(y);       // prints 15\n///\n/// let y = x.reduce("process_extra");\n///\n/// print(y);       // prints 25\n/// ```\nfn reduce(array: Array, reducer: String) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements while applying the `reducer` function.\n///\n/// # Function Parameters\n///\n/// * `result`: accumulated result, initially `()`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce(|r, v| v + (r ?? 0));\n///\n/// print(y);       // prints 15\n///\n/// let y = x.reduce(|r, v, i| v + i + (r ?? 0));\n///\n/// print(y);       // prints 25\n/// ```\nfn reduce(array: Array, reducer: FnPtr) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements while applying a function named by `reducer`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `reducer` must exist taking these parameters:\n///\n/// * `result`: accumulated result, starting with the value of `initial`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn process(r, x) { x + r }\n///\n/// fn process_extra(r, x, i) { x + i + r }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce("process", 5);\n///\n/// print(y);       // prints 20\n///\n/// let y = x.reduce("process_extra", 5);\n///\n/// print(y);       // prints 30\n/// ```\nfn reduce(array: Array, reducer: String, initial: ?) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements while applying the `reducer` function.\n///\n/// # Function Parameters\n///\n/// * `result`: accumulated result, starting with the value of `initial`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce(|r, v| v + r, 5);\n///\n/// print(y);       // prints 20\n///\n/// let y = x.reduce(|r, v, i| v + i + r, 5);\n///\n/// print(y);       // prints 30\n/// ```\nfn reduce(array: Array, reducer: FnPtr, initial: ?) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements, in _reverse_ order,\n/// while applying a function named by `reducer`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `reducer` must exist taking these parameters:\n///\n/// * `result`: accumulated result, initially `()`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn process(r, x) {\n///     x + (r ?? 0)\n/// }\n/// fn process_extra(r, x, i) {\n///     x + i + (r ?? 0)\n/// }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce_rev("process");\n///\n/// print(y);       // prints 15\n///\n/// let y = x.reduce_rev("process_extra");\n///\n/// print(y);       // prints 25\n/// ```\nfn reduce_rev(array: Array, reducer: String) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements, in _reverse_ order,\n/// while applying the `reducer` function.\n///\n/// # Function Parameters\n///\n/// * `result`: accumulated result, initially `()`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce_rev(|r, v| v + (r ?? 0));\n///\n/// print(y);       // prints 15\n///\n/// let y = x.reduce_rev(|r, v, i| v + i + (r ?? 0));\n///\n/// print(y);       // prints 25\n/// ```\nfn reduce_rev(array: Array, reducer: FnPtr) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements, in _reverse_ order,\n/// while applying a function named by `reducer`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `reducer` must exist taking these parameters:\n///\n/// * `result`: accumulated result, starting with the value of `initial`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn process(r, x) { x + r }\n///\n/// fn process_extra(r, x, i) { x + i + r }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce_rev("process", 5);\n///\n/// print(y);       // prints 20\n///\n/// let y = x.reduce_rev("process_extra", 5);\n///\n/// print(y);       // prints 30\n/// ```\nfn reduce_rev(array: Array, reducer: String, initial: ?) -> RhaiResult;\n\n/// Reduce an array by iterating through all elements, in _reverse_ order,\n/// while applying the `reducer` function.\n///\n/// # Function Parameters\n///\n/// * `result`: accumulated result, starting with the value of `initial`\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.reduce_rev(|r, v| v + r, 5);\n///\n/// print(y);       // prints 20\n///\n/// let y = x.reduce_rev(|r, v, i| v + i + r, 5);\n///\n/// print(y);       // prints 30\n/// ```\nfn reduce_rev(array: Array, reducer: FnPtr, initial: ?) -> RhaiResult;\n\n/// Remove the element at the specified `index` from the array and return it.\n///\n/// * If `index` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `index` < -length of array, `()` is returned.\n/// * If `index` ≥ length of array, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// print(x.remove(1));     // prints 2\n///\n/// print(x);               // prints "[1, 3]"\n///\n/// print(x.remove(-2));    // prints 1\n///\n/// print(x);               // prints "[3]"\n/// ```\nfn remove(array: Array, index: int) -> ?;\n\n/// Remove the byte at the specified `index` from the BLOB and return it.\n///\n/// * If `index` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `index` < -length of BLOB, zero is returned.\n/// * If `index` ≥ length of BLOB, zero is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(x.remove(1));     // prints 2\n///\n/// print(x);               // prints "[01030405]"\n///\n/// print(x.remove(-2));    // prints 4\n///\n/// print(x);               // prints "[010305]"\n/// ```\nfn remove(blob: Blob, index: int) -> int;\n\n/// Remove any property of the specified `name` from the object map, returning its value.\n///\n/// If the property does not exist, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n///\n/// let x = m.remove("b");\n///\n/// print(x);       // prints 2\n///\n/// print(m);       // prints "#{a:1, c:3}"\n/// ```\nfn remove(map: Map, property: String) -> ?;\n\n/// Remove all occurrences of a character from the string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.remove("o");\n///\n/// print(text);        // prints "hell, wrld! hell, fbar!"\n/// ```\nfn remove(string: String, character: char) -> ();\n\n/// Remove all occurrences of a sub-string from the string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.remove("hello");\n///\n/// print(text);        // prints ", world! , foobar!"\n/// ```\nfn remove(string: String, sub_string: String) -> ();\n\n/// Replace all occurrences of the specified character in the string with another character.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.replace("l", \'*\');\n///\n/// print(text);        // prints "he**o, wor*d! he**o, foobar!"\n/// ```\nfn replace(string: String, find_character: char, substitute_character: char) -> ();\n\n/// Replace all occurrences of the specified character in the string with another string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.replace(\'l\', "(^)");\n///\n/// print(text);        // prints "he(^)(^)o, wor(^)d! he(^)(^)o, foobar!"\n/// ```\nfn replace(string: String, find_character: char, substitute_string: String) -> ();\n\n/// Replace all occurrences of the specified sub-string in the string with the specified character.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.replace("hello", \'*\');\n///\n/// print(text);        // prints "*, world! *, foobar!"\n/// ```\nfn replace(string: String, find_string: String, substitute_character: char) -> ();\n\n/// Replace all occurrences of the specified sub-string in the string with another string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.replace("hello", "hey");\n///\n/// print(text);        // prints "hey, world! hey, foobar!"\n/// ```\nfn replace(string: String, find_string: String, substitute_string: String) -> ();\n\n/// Remove all elements in the array that do not return `true` when applied a function named by\n/// `filter` and return them as a new array.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn large(x) { x >= 3 }\n///\n/// fn screen(x, i) { x + i <= 5 }\n///\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.retain("large");\n///\n/// print(x);       // prints "[3, 4, 5]"\n///\n/// print(y);       // prints "[1, 2]"\n///\n/// let z = x.retain("screen");\n///\n/// print(x);       // prints "[3, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn retain(array: Array, filter: String) -> Array;\n\n/// Remove all elements in the array that do not return `true` when applied the `filter`\n/// function and return them as a new array.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.retain(|v| v >= 3);\n///\n/// print(x);       // prints "[3, 4, 5]"\n///\n/// print(y);       // prints "[1, 2]"\n///\n/// let z = x.retain(|v, i| v + i <= 5);\n///\n/// print(x);       // prints "[3, 4]"\n///\n/// print(z);       // prints "[5]"\n/// ```\nfn retain(array: Array, filter: FnPtr) -> Array;\n\n/// Remove all elements in the array not within an exclusive `range` and return them as a new array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.retain(1..4);\n///\n/// print(x);       // prints "[2, 3, 4]"\n///\n/// print(y);       // prints "[1, 5]"\n///\n/// let z = x.retain(1..3);\n///\n/// print(x);       // prints "[3, 4]"\n///\n/// print(z);       // prints "[1]"\n/// ```\nfn retain(array: Array, range: Range<int>) -> Array;\n\n/// Remove all elements in the array not within an inclusive `range` and return them as a new array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.retain(1..=3);\n///\n/// print(x);       // prints "[2, 3, 4]"\n///\n/// print(y);       // prints "[1, 5]"\n///\n/// let z = x.retain(1..=2);\n///\n/// print(x);       // prints "[3, 4]"\n///\n/// print(z);       // prints "[1]"\n/// ```\nfn retain(array: Array, range: RangeInclusive<int>) -> Array;\n\n/// Remove all bytes in the BLOB not within an exclusive `range` and return them as a new BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.retain(1..4);\n///\n/// print(b1);      // prints "[020304]"\n///\n/// print(b2);      // prints "[0105]"\n///\n/// let b3 = b1.retain(1..3);\n///\n/// print(b1);      // prints "[0304]"\n///\n/// print(b2);      // prints "[01]"\n/// ```\nfn retain(blob: Blob, range: Range<int>) -> Blob;\n\n/// Remove all bytes in the BLOB not within an inclusive `range` and return them as a new BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.retain(1..=3);\n///\n/// print(b1);      // prints "[020304]"\n///\n/// print(b2);      // prints "[0105]"\n///\n/// let b3 = b1.retain(1..=2);\n///\n/// print(b1);      // prints "[0304]"\n///\n/// print(b2);      // prints "[01]"\n/// ```\nfn retain(blob: Blob, range: RangeInclusive<int>) -> Blob;\n\n/// Remove all elements not within a portion of the array and return them as a new array.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, all elements are removed returned.\n/// * If `len` ≤ 0, all elements are removed and returned.\n/// * If `start` position + `len` ≥ length of array, entire portion of the array before the `start` position is removed and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.retain(1, 2);\n///\n/// print(x);       // prints "[2, 3]"\n///\n/// print(y);       // prints "[1, 4, 5]"\n///\n/// let z = x.retain(-1, 1);\n///\n/// print(x);       // prints "[3]"\n///\n/// print(z);       // prints "[2]"\n/// ```\nfn retain(array: Array, start: int, len: int) -> Array;\n\n/// Remove all bytes not within a portion of the BLOB and return them as a new BLOB.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, all elements are removed returned.\n/// * If `len` ≤ 0, all elements are removed and returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB before the `start` position is removed and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.retain(1, 2);\n///\n/// print(b1);      // prints "[0203]"\n///\n/// print(b2);      // prints "[010405]"\n///\n/// let b3 = b1.retain(-1, 1);\n///\n/// print(b1);      // prints "[03]"\n///\n/// print(b3);      // prints "[02]"\n/// ```\nfn retain(blob: Blob, start: int, len: int) -> Blob;\n\n/// Reverse all the elements in the array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// x.reverse();\n///\n/// print(x);       // prints "[5, 4, 3, 2, 1]"\n/// ```\nfn reverse(array: Array) -> ();\n\n/// Reverse the BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b);           // prints "[0102030405]"\n///\n/// b.reverse();\n///\n/// print(b);           // prints "[0504030201]"\n/// ```\nfn reverse(blob: Blob) -> ();\n\n/// Return the nearest whole number closest to the decimal number.\n/// Always round mid-point towards the closest even number.\nfn round(x: Decimal) -> Decimal;\n\n/// Return the nearest whole number closest to the floating-point number.\n/// Rounds away from zero.\nfn round(x: float) -> float;\n\n/// Round the decimal number to the specified number of `digits` after the decimal point and return it.\n/// Always round mid-point towards the closest even number.\nfn round(x: Decimal, digits: int) -> Decimal;\n\n/// Round the decimal number to the specified number of `digits` after the decimal point and return it.\n/// Always round towards zero.\nfn round_down(x: Decimal, digits: int) -> Decimal;\n\n/// Round the decimal number to the specified number of `digits` after the decimal point and return it.\n/// Always round mid-points towards zero.\nfn round_half_down(x: Decimal, digits: int) -> Decimal;\n\n/// Round the decimal number to the specified number of `digits` after the decimal point and return it.\n/// Always round mid-points away from zero.\nfn round_half_up(x: Decimal, digits: int) -> Decimal;\n\n/// Round the decimal number to the specified number of `digits` after the decimal point and return it.\n/// Always round away from zero.\nfn round_up(x: Decimal, digits: int) -> Decimal;\n\n/// Set the element at the `index` position in the array to a new `value`.\n///\n/// * If `index` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `index` < -length of array, the array is not modified.\n/// * If `index` ≥ length of array, the array is not modified.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// x.set(0, 42);\n///\n/// print(x);           // prints "[42, 2, 3]"\n///\n/// x.set(-3, 0);\n///\n/// print(x);           // prints "[0, 2, 3]"\n///\n/// x.set(99, 123);\n///\n/// print(x);           // prints "[0, 2, 3]"\n/// ```\nfn set(array: Array, index: int, value: ?) -> ();\n\n/// Set the particular `index` position in the BLOB to a new byte `value`.\n///\n/// * If `index` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `index` < -length of BLOB, the BLOB is not modified.\n/// * If `index` ≥ length of BLOB, the BLOB is not modified.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// b.set(0, 0x42);\n///\n/// print(b);           // prints "[4202030405]"\n///\n/// b.set(-3, 0);\n///\n/// print(b);           // prints "[4202000405]"\n///\n/// b.set(99, 123);\n///\n/// print(b);           // prints "[4202000405]"\n/// ```\nfn set(blob: Blob, index: int, value: int) -> ();\n\n/// Set the value of the `property` in the object map to a new `value`.\n///\n/// If `property` does not exist in the object map, it is added.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a: 1, b: 2, c: 3};\n///\n/// m.set("b", 42)\'\n///\n/// print(m);           // prints "#{a: 1, b: 42, c: 3}"\n///\n/// x.set("x", 0);\n///\n/// print(m);           // prints "#{a: 1, b: 42, c: 3, x: 0}"\n/// ```\nfn set(map: Map, property: String, value: ?) -> ();\n\n/// Set the `index` position in the string to a new `character`.\n///\n/// * If `index` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `index` < -length of string, the string is not modified.\n/// * If `index` ≥ length of string, the string is not modified.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// text.set(3, \'x\');\n///\n/// print(text);     // prints "helxo, world!"\n///\n/// text.set(-3, \'x\');\n///\n/// print(text);    // prints "hello, worxd!"\n///\n/// text.set(99, \'x\');\n///\n/// print(text);    // prints "hello, worxd!"\n/// ```\nfn set(string: String, index: int, character: char) -> ();\n\n/// Set the _tag_ of a `Dynamic` value.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = "hello, world!";\n///\n/// x.tag = 42;\n///\n/// print(x.tag);           // prints 42\n/// ```\nfn set tag(value: ?, tag: int) -> ();\n\n/// Set the specified `bit` in the number if the new value is `true`.\n/// Clear the `bit` if the new value is `false`.\n///\n/// If `bit` < 0, position counts from the MSB (Most Significant Bit).\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// x.set_bit(5, true);\n///\n/// print(x);               // prints 123488\n///\n/// x.set_bit(6, false);\n///\n/// print(x);               // prints 123424\n///\n/// x.set_bit(-48, false);\n///\n/// print(x);               // prints 57888 on 64-bit\n/// ```\nfn set_bit(value: int, bit: int, new_value: bool) -> ();\n\n/// Replace an exclusive range of bits in the number with a new value.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// x.set_bits(5..10, 42);\n///\n/// print(x);           // print 123200\n/// ```\nfn set_bits(value: int, range: Range<int>, new_value: int) -> ();\n\n/// Replace an inclusive range of bits in the number with a new value.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// x.set_bits(5..=9, 42);\n///\n/// print(x);           // print 123200\n/// ```\nfn set_bits(value: int, range: RangeInclusive<int>, new_value: int) -> ();\n\n/// Replace a portion of bits in the number with a new value.\n///\n/// * If `start` < 0, position counts from the MSB (Most Significant Bit).\n/// * If `bits` ≤ 0, the number is not modified.\n/// * If `start` position + `bits` ≥ total number of bits, the bits after the `start` position are replaced.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = 123456;\n///\n/// x.set_bits(5, 8, 42);\n///\n/// print(x);           // prints 124224\n///\n/// x.set_bits(-16, 10, 42);\n///\n/// print(x);           // prints 11821949021971776 on 64-bit\n/// ```\nfn set_bits(value: int, bit: int, bits: int, new_value: int) -> ();\n\n/// Set the _tag_ of a `Dynamic` value.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = "hello, world!";\n///\n/// x.tag = 42;\n///\n/// print(x.tag);           // prints 42\n/// ```\nfn set_tag(value: ?, tag: int) -> ();\n\n/// Remove the first element from the array and return it.\n///\n/// If the array is empty, `()` is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3];\n///\n/// print(x.shift());   // prints 1\n///\n/// print(x);           // prints "[2, 3]"\n/// ```\nfn shift(array: Array) -> ?;\n\n/// Remove the first byte from the BLOB and return it.\n///\n/// If the BLOB is empty, zero is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// print(b.shift());       // prints 1\n///\n/// print(b);               // prints "[02030405]"\n/// ```\nfn shift(blob: Blob) -> int;\n\n/// Return the sign (as an integer) of the decimal number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: Decimal) -> int;\n\n/// Return the sign (as an integer) of the number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: int) -> int;\n\n/// Return the sign (as an integer) of the floating-point number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: f32) -> int;\n\n/// Return the sign (as an integer) of the floating-point number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: float) -> int;\n\n/// Return the sign (as an integer) of the number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: i128) -> int;\n\n/// Return the sign (as an integer) of the number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: i16) -> int;\n\n/// Return the sign (as an integer) of the number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: i32) -> int;\n\n/// Return the sign (as an integer) of the number according to the following:\n///\n/// * `0` if the number is zero\n/// * `1` if the number is positive\n/// * `-1` if the number is negative\nfn sign(x: i8) -> int;\n\n/// Return the sine of the decimal number in radians.\nfn sin(x: Decimal) -> Decimal;\n\n/// Return the sine of the floating-point number in radians.\nfn sin(x: float) -> float;\n\n/// Return the hyperbolic sine of the floating-point number in radians.\nfn sinh(x: float) -> float;\n\n/// Block the current thread for a particular number of `seconds`.\nfn sleep(seconds: int) -> ();\n\n/// Block the current thread for a particular number of `seconds`.\nfn sleep(seconds: float) -> ();\n\n/// Return `true` if any element in the array that returns `true` when applied a function named\n/// by `filter`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `filter` must exist taking these parameters:\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// fn large(x) { x > 3 }\n///\n/// fn huge(x) { x > 10 }\n///\n/// fn screen(x, i) { i > x }\n///\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.some("large"));     // prints true\n///\n/// print(x.some("huge"));      // prints false\n///\n/// print(x.some("screen"));    // prints true\n/// ```\nfn some(array: Array, filter: String) -> bool;\n\n/// Return `true` if any element in the array that returns `true` when applied the `filter` function.\n///\n/// # Function Parameters\n///\n/// * `element`: copy of array element\n/// * `index` _(optional)_: current index in the array\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5];\n///\n/// print(x.some(|v| v > 3));       // prints true\n///\n/// print(x.some(|v| v > 10));      // prints false\n///\n/// print(x.some(|v, i| i > v));    // prints true\n/// ```\nfn some(array: Array, filter: FnPtr) -> bool;\n\n/// Sort the array.\n///\n/// All elements in the array must be of the same data type.\n///\n/// # Supported Data Types\n///\n/// * integer numbers\n/// * floating-point numbers\n/// * decimal numbers\n/// * characters\n/// * strings\n/// * booleans\n/// * `()`\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10];\n///\n/// x.sort();\n///\n/// print(x);       // prints "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"\n/// ```\nfn sort(array: Array) -> ();\n\n/// Sort the array based on applying a function named by `comparer`.\n///\n/// # Function Parameters\n///\n/// A function with the same name as the value of `comparer` must exist taking these parameters:\n///\n/// * `element1`: copy of the current array element to compare\n/// * `element2`: copy of the next array element to compare\n///\n/// ## Return Value\n///\n/// * Any integer > 0 if `element1 > element2`\n/// * Zero if `element1 == element2`\n/// * Any integer < 0 if `element1 < element2`\n///\n/// # Example\n///\n/// ```rhai\n/// fn reverse(a, b) {\n///     if a > b {\n///         -1\n///     } else if a < b {\n///         1\n///     } else {\n///         0\n///     }\n/// }\n/// let x = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10];\n///\n/// x.sort("reverse");\n///\n/// print(x);       // prints "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"\n/// ```\nfn sort(array: Array, comparer: String) -> ();\n\n/// Sort the array based on applying the `comparer` function.\n///\n/// # Function Parameters\n///\n/// * `element1`: copy of the current array element to compare\n/// * `element2`: copy of the next array element to compare\n///\n/// ## Return Value\n///\n/// * Any integer > 0 if `element1 > element2`\n/// * Zero if `element1 == element2`\n/// * Any integer < 0 if `element1 < element2`\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10];\n///\n/// // Do comparisons in reverse\n/// x.sort(|a, b| if a > b { -1 } else if a < b { 1 } else { 0 });\n///\n/// print(x);       // prints "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"\n/// ```\nfn sort(array: Array, comparer: FnPtr) -> ();\n\n/// Replace an exclusive range of the array with another array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n/// let y = [7, 8, 9, 10];\n///\n/// x.splice(1..3, y);\n///\n/// print(x);       // prints "[1, 7, 8, 9, 10, 4, 5]"\n/// ```\nfn splice(array: Array, range: Range<int>, replace: Array) -> ();\n\n/// Replace an inclusive range of the array with another array.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n/// let y = [7, 8, 9, 10];\n///\n/// x.splice(1..=3, y);\n///\n/// print(x);       // prints "[1, 7, 8, 9, 10, 5]"\n/// ```\nfn splice(array: Array, range: RangeInclusive<int>, replace: Array) -> ();\n\n/// Replace an exclusive `range` of the BLOB with another BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob(10, 0x42);\n/// let b2 = blob(5, 0x18);\n///\n/// b1.splice(1..4, b2);\n///\n/// print(b1);      // prints "[4218181818184242 42424242]"\n/// ```\nfn splice(blob: Blob, range: Range<int>, replace: Blob) -> ();\n\n/// Replace an inclusive `range` of the BLOB with another BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob(10, 0x42);\n/// let b2 = blob(5, 0x18);\n///\n/// b1.splice(1..=4, b2);\n///\n/// print(b1);      // prints "[4218181818184242 424242]"\n/// ```\nfn splice(blob: Blob, range: RangeInclusive<int>, replace: Blob) -> ();\n\n/// Replace a portion of the array with another array.\n///\n/// * If `start` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `start` < -length of array, position counts from the beginning of the array.\n/// * If `start` ≥ length of array, the other array is appended to the end of the array.\n/// * If `len` ≤ 0, the other array is inserted into the array at the `start` position without replacing any element.\n/// * If `start` position + `len` ≥ length of array, entire portion of the array after the `start` position is replaced.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n/// let y = [7, 8, 9, 10];\n///\n/// x.splice(1, 2, y);\n///\n/// print(x);       // prints "[1, 7, 8, 9, 10, 4, 5]"\n///\n/// x.splice(-5, 4, y);\n///\n/// print(x);       // prints "[1, 7, 7, 8, 9, 10, 5]"\n/// ```\nfn splice(array: Array, start: int, len: int, replace: Array) -> ();\n\n/// Replace a portion of the BLOB with another BLOB.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, the other BLOB is appended to the end of the BLOB.\n/// * If `len` ≤ 0, the other BLOB is inserted into the BLOB at the `start` position without replacing anything.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is replaced.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob(10, 0x42);\n/// let b2 = blob(5, 0x18);\n///\n/// b1.splice(1, 3, b2);\n///\n/// print(b1);      // prints "[4218181818184242 42424242]"\n///\n/// b1.splice(-5, 4, b2);\n///\n/// print(b1);      // prints "[4218181818184218 1818181842]"\n/// ```\nfn splice(blob: Blob, start: int, len: int, replace: Blob) -> ();\n\n/// Split the string into segments based on whitespaces, returning an array of the segments.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split());        // prints ["hello,", "world!", "hello,", "foo!"]\n/// ```\nfn split(string: String) -> Array;\n\n/// Cut off the array at `index` and return it as a new array.\n///\n/// * If `index` < 0, position counts from the end of the array (`-1` is the last element).\n/// * If `index` is zero, the entire array is cut and returned.\n/// * If `index` < -length of array, the entire array is cut and returned.\n/// * If `index` ≥ length of array, nothing is cut from the array and an empty array is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// let y = x.split(2);\n///\n/// print(y);           // prints "[3, 4, 5]"\n///\n/// print(x);           // prints "[1, 2]"\n/// ```\nfn split(array: Array, index: int) -> Array;\n\n/// Cut off the BLOB at `index` and return it as a new BLOB.\n///\n/// * If `index` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `index` is zero, the entire BLOB is cut and returned.\n/// * If `index` < -length of BLOB, the entire BLOB is cut and returned.\n/// * If `index` ≥ length of BLOB, nothing is cut from the BLOB and an empty BLOB is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let b1 = blob();\n///\n/// b1 += 1; b1 += 2; b1 += 3; b1 += 4; b1 += 5;\n///\n/// let b2 = b1.split(2);\n///\n/// print(b2);          // prints "[030405]"\n///\n/// print(b1);          // prints "[0102]"\n/// ```\nfn split(blob: Blob, index: int) -> Blob;\n\n/// Split the string into two at the specified `index` position and return it both strings\n/// as an array.\n///\n/// The character at the `index` position (if any) is returned in the _second_ string.\n///\n/// * If `index` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `index` < -length of string, it is equivalent to cutting at position 0.\n/// * If `index` ≥ length of string, it is equivalent to cutting at the end of the string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.split(6));       // prints ["hello,", " world!"]\n///\n/// print(text.split(13));      // prints ["hello, world!", ""]\n///\n/// print(text.split(-6));      // prints ["hello, ", "world!"]\n///\n/// print(text.split(-99));     // prints ["", "hello, world!"]\n/// ```\nfn split(string: String, index: int) -> Array;\n\n/// Split the string into segments based on a `delimiter` string, returning an array of the segments.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split("ll"));    // prints ["he", "o, world! he", "o, foo!"]\n/// ```\nfn split(string: String, delimiter: String) -> Array;\n\n/// Split the string into segments based on a `delimiter` character, returning an array of the segments.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split(\'l\'));     // prints ["he", "", "o, wor", "d! he", "", "o, foo!"]\n/// ```\nfn split(string: String, delimiter: char) -> Array;\n\n/// Split the string into at most the specified number of `segments` based on a `delimiter` string,\n/// returning an array of the segments.\n///\n/// If `segments` < 1, only one segment is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split("ll", 2));     // prints ["he", "o, world! hello, foo!"]\n/// ```\nfn split(string: String, delimiter: String, segments: int) -> Array;\n\n/// Split the string into at most the specified number of `segments` based on a `delimiter` character,\n/// returning an array of the segments.\n///\n/// If `segments` < 1, only one segment is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split(\'l\', 3));      // prints ["he", "", "o, world! hello, foo!"]\n/// ```\nfn split(string: String, delimiter: char, segments: int) -> Array;\n\n/// Split the string into segments based on a `delimiter` string, returning an array of the\n/// segments in _reverse_ order.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split_rev("ll"));    // prints ["o, foo!", "o, world! he", "he"]\n/// ```\nfn split_rev(string: String, delimiter: String) -> Array;\n\n/// Split the string into segments based on a `delimiter` character, returning an array of\n/// the segments in _reverse_ order.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split_rev(\'l\'));     // prints ["o, foo!", "", "d! he", "o, wor", "", "he"]\n/// ```\nfn split_rev(string: String, delimiter: char) -> Array;\n\n/// Split the string into at most a specified number of `segments` based on a `delimiter` string,\n/// returning an array of the segments in _reverse_ order.\n///\n/// If `segments` < 1, only one segment is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split_rev("ll", 2));     // prints ["o, foo!", "hello, world! he"]\n/// ```\nfn split_rev(string: String, delimiter: String, segments: int) -> Array;\n\n/// Split the string into at most the specified number of `segments` based on a `delimiter` character,\n/// returning an array of the segments.\n///\n/// If `segments` < 1, only one segment is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foo!";\n///\n/// print(text.split(\'l\', 3));      // prints ["o, foo!", "", "hello, world! he"\n/// ```\nfn split_rev(string: String, delimiter: char, segments: int) -> Array;\n\n/// Return the square root of the decimal number.\nfn sqrt(x: Decimal) -> Decimal;\n\n/// Return the square root of the floating-point number.\nfn sqrt(x: float) -> float;\n\n/// Return the start of the exclusive range.\nfn start(range: ExclusiveRange) -> int;\n\n/// Return the start of the inclusive range.\nfn start(range: InclusiveRange) -> int;\n\n/// Return `true` if the string starts with a specified string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.starts_with("hello"));   // prints true\n///\n/// print(text.starts_with("world"));   // prints false\n/// ```\nfn starts_with(string: String, match_string: String) -> bool;\n\n/// Copy an exclusive range of characters from the string and return it as a new string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.sub_string(3..7));   // prints "lo, "\n/// ```\nfn sub_string(string: String, range: Range<int>) -> String;\n\n/// Copy an inclusive range of characters from the string and return it as a new string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.sub_string(3..=7));  // prints "lo, w"\n/// ```\nfn sub_string(string: String, range: RangeInclusive<int>) -> String;\n\n/// Copy a portion of the string beginning at the `start` position till the end and return it as\n/// a new string.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, the entire string is copied and returned.\n/// * If `start` ≥ length of string, an empty string is returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.sub_string(5));      // prints ", world!"\n///\n/// print(text.sub_string(-5));      // prints "orld!"\n/// ```\nfn sub_string(string: String, start: int) -> String;\n\n/// Copy a portion of the string and return it as a new string.\n///\n/// * If `start` < 0, position counts from the end of the string (`-1` is the last character).\n/// * If `start` < -length of string, position counts from the beginning of the string.\n/// * If `start` ≥ length of string, an empty string is returned.\n/// * If `len` ≤ 0, an empty string is returned.\n/// * If `start` position + `len` ≥ length of string, entire portion of the string after the `start` position is copied and returned.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!";\n///\n/// print(text.sub_string(3, 4));   // prints "lo, "\n///\n/// print(text.sub_string(-8, 3));  // prints ", w"\n/// ```\nfn sub_string(string: String, start: int, len: int) -> String;\n\n/// Return the _tag_ of a `Dynamic` value.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = "hello, world!";\n///\n/// x.tag = 42;\n///\n/// print(x.tag);           // prints 42\n/// ```\nfn tag(value: ?) -> int;\n\n/// Return the tangent of the decimal number in radians.\nfn tan(x: Decimal) -> Decimal;\n\n/// Return the tangent of the floating-point number in radians.\nfn tan(x: float) -> float;\n\n/// Return the hyperbolic tangent of the floating-point number in radians.\nfn tanh(x: float) -> float;\n\n/// Create a timestamp containing the current system time.\n///\n/// # Example\n///\n/// ```rhai\n/// let now = timestamp();\n///\n/// sleep(10.0);            // sleep for 10 seconds\n///\n/// print(now.elapsed);     // prints 10.???\n/// ```\nfn timestamp() -> Instant;\n\n/// Convert the BLOB into an array of integers.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob(5, 0x42);\n///\n/// let x = b.to_array();\n///\n/// print(x);       // prints "[66, 66, 66, 66, 66]"\n/// ```\nfn to_array(blob: Blob) -> Array;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: i128) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: i16) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: i32) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: int) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: i8) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: u128) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: u16) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: u32) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: u64) -> String;\n\n/// Convert the `value` into a string in binary format.\nfn to_binary(value: u8) -> String;\n\n/// Convert the string into an UTF-8 encoded byte-stream as a BLOB.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "朝には紅顔ありて夕べには白骨となる";\n///\n/// let bytes = text.to_blob();\n///\n/// print(bytes.len());     // prints 51\n/// ```\nfn to_blob(string: String) -> Blob;\n\n/// Return an array containing all the characters of the string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello";\n///\n/// print(text.to_chars());     // prints "[\'h\', \'e\', \'l\', \'l\', \'o\']"\n/// ```\nfn to_chars(string: String) -> Array;\n\n/// Convert the array into a string.\nfn to_debug(array: Array) -> String;\n\n/// Convert the string into debug format.\nfn to_debug(character: char) -> String;\n\n/// Convert the function pointer into a string in debug format.\nfn to_debug(f: FnPtr) -> String;\n\n/// Convert the value of the `item` into a string in debug format.\nfn to_debug(item: ?) -> String;\n\n/// Convert the object map into a string.\nfn to_debug(map: Map) -> String;\n\n/// Convert the value of `number` into a string.\nfn to_debug(number: f32) -> String;\n\n/// Convert the value of `number` into a string.\nfn to_debug(number: float) -> String;\n\n/// Convert the string into debug format.\nfn to_debug(string: String) -> String;\n\n/// Convert the unit into a string in debug format.\nfn to_debug(unit: ()) -> String;\n\n/// Convert the boolean value into a string in debug format.\nfn to_debug(value: bool) -> String;\n\n/// Convert the floating-point number to decimal.\nfn to_decimal(x: f32) -> Decimal;\n\n/// Convert the floating-point number to decimal.\nfn to_decimal(x: float) -> Decimal;\n\nfn to_decimal(x: i16) -> Decimal;\n\nfn to_decimal(x: i32) -> Decimal;\n\nfn to_decimal(x: int) -> Decimal;\n\nfn to_decimal(x: i8) -> Decimal;\n\nfn to_decimal(x: u16) -> Decimal;\n\nfn to_decimal(x: u32) -> Decimal;\n\nfn to_decimal(x: u64) -> Decimal;\n\nfn to_decimal(x: u8) -> Decimal;\n\n/// Convert radians to degrees.\nfn to_degrees(x: float) -> float;\n\n/// Convert the decimal number to floating-point.\nfn to_float(x: Decimal) -> float;\n\n/// Convert the 32-bit floating-point number to 64-bit.\nfn to_float(x: f32) -> float;\n\nfn to_float(x: i128) -> float;\n\nfn to_float(x: i16) -> float;\n\nfn to_float(x: i32) -> float;\n\nfn to_float(x: int) -> float;\n\nfn to_float(x: i8) -> float;\n\nfn to_float(x: u128) -> float;\n\nfn to_float(x: u16) -> float;\n\nfn to_float(x: u32) -> float;\n\nfn to_float(x: u8) -> float;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: i128) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: i16) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: i32) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: int) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: i8) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: u128) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: u16) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: u32) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: u64) -> String;\n\n/// Convert the `value` into a string in hex format.\nfn to_hex(value: u8) -> String;\n\n/// Convert the decimal number into an integer.\nfn to_int(x: Decimal) -> int;\n\nfn to_int(x: char) -> int;\n\n/// Convert the floating-point number into an integer.\nfn to_int(x: f32) -> int;\n\n/// Convert the floating-point number into an integer.\nfn to_int(x: float) -> int;\n\nfn to_int(x: i128) -> int;\n\nfn to_int(x: i16) -> int;\n\nfn to_int(x: i32) -> int;\n\nfn to_int(x: int) -> int;\n\nfn to_int(x: i8) -> int;\n\nfn to_int(x: u128) -> int;\n\nfn to_int(x: u16) -> int;\n\nfn to_int(x: u32) -> int;\n\nfn to_int(x: u64) -> int;\n\nfn to_int(x: u8) -> int;\n\n/// Return the JSON representation of the object map.\n///\n/// # Data types\n///\n/// Only the following data types should be kept inside the object map:\n/// `INT`, `FLOAT`, `ImmutableString`, `char`, `bool`, `()`, `Array`, `Map`.\n///\n/// # Errors\n///\n/// Data types not supported by JSON serialize into formats that may\n/// invalidate the result.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n///\n/// print(m.to_json());     // prints {"a":1, "b":2, "c":3}\n/// ```\nfn to_json(map: Map) -> String;\n\n/// Convert the character to lower-case and return it as a new character.\n///\n/// # Example\n///\n/// ```rhai\n/// let ch = \'A\';\n///\n/// print(ch.to_lower());       // prints \'a\'\n///\n/// print(ch);                  // prints \'A\'\n/// ```\nfn to_lower(character: char) -> char;\n\n/// Convert the string to all lower-case and return it as a new string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "HELLO, WORLD!"\n///\n/// print(text.to_lower());     // prints "hello, world!"\n///\n/// print(text);                // prints "HELLO, WORLD!"\n/// ```\nfn to_lower(string: String) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: i128) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: i16) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: i32) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: int) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: i8) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: u128) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: u16) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: u32) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: u64) -> String;\n\n/// Convert the `value` into a string in octal format.\nfn to_octal(value: u8) -> String;\n\n/// Convert degrees to radians.\nfn to_radians(x: float) -> float;\n\n/// Convert the array into a string.\nfn to_string(array: Array) -> String;\n\n/// Return the character into a string.\nfn to_string(character: char) -> String;\n\n/// Convert the value of the `item` into a string.\nfn to_string(item: ?) -> String;\n\n/// Convert the object map into a string.\nfn to_string(map: Map) -> String;\n\n/// Convert the value of `number` into a string.\nfn to_string(number: f32) -> String;\n\n/// Convert the value of `number` into a string.\nfn to_string(number: float) -> String;\n\n/// Return the `string`.\nfn to_string(string: String) -> String;\n\n/// Return the empty string.\nfn to_string(unit: ()) -> String;\n\n/// Return the boolean value into a string.\nfn to_string(value: bool) -> String;\n\n/// Convert the character to upper-case and return it as a new character.\n///\n/// # Example\n///\n/// ```rhai\n/// let ch = \'a\';\n///\n/// print(ch.to_upper());       // prints \'A\'\n///\n/// print(ch);                  // prints \'a\'\n/// ```\nfn to_upper(character: char) -> char;\n\n/// Convert the string to all upper-case and return it as a new string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world!"\n///\n/// print(text.to_upper());     // prints "HELLO, WORLD!"\n///\n/// print(text);                // prints "hello, world!"\n/// ```\nfn to_upper(string: String) -> String;\n\n/// Remove whitespace characters from both ends of the string.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "   hello     ";\n///\n/// text.trim();\n///\n/// print(text);    // prints "hello"\n/// ```\nfn trim(string: String) -> ();\n\n/// Cut off the array at the specified length.\n///\n/// * If `len` ≤ 0, the array is cleared.\n/// * If `len` ≥ length of array, the array is not truncated.\n///\n/// # Example\n///\n/// ```rhai\n/// let x = [1, 2, 3, 4, 5];\n///\n/// x.truncate(3);\n///\n/// print(x);       // prints "[1, 2, 3]"\n///\n/// x.truncate(10);\n///\n/// print(x);       // prints "[1, 2, 3]"\n/// ```\nfn truncate(array: Array, len: int) -> ();\n\n/// Cut off the BLOB at the specified length.\n///\n/// * If `len` ≤ 0, the BLOB is cleared.\n/// * If `len` ≥ length of BLOB, the BLOB is not truncated.\n///\n/// # Example\n///\n/// ```rhai\n/// let b = blob();\n///\n/// b += 1; b += 2; b += 3; b += 4; b += 5;\n///\n/// b.truncate(3);\n///\n/// print(b);           // prints "[010203]"\n///\n/// b.truncate(10);\n///\n/// print(b);           // prints "[010203]"\n/// ```\nfn truncate(blob: Blob, len: int) -> ();\n\n/// Cut off the string at the specified number of characters.\n///\n/// * If `len` ≤ 0, the string is cleared.\n/// * If `len` ≥ length of string, the string is not truncated.\n///\n/// # Example\n///\n/// ```rhai\n/// let text = "hello, world! hello, foobar!";\n///\n/// text.truncate(13);\n///\n/// print(text);    // prints "hello, world!"\n///\n/// x.truncate(10);\n///\n/// print(text);    // prints "hello, world!"\n/// ```\nfn truncate(string: String, len: int) -> ();\n\n/// Return an array with all the property values in the object map.\n///\n/// # Example\n///\n/// ```rhai\n/// let m = #{a:1, b:2, c:3};\n///\n/// print(m.values());      // prints "[1, 2, 3]""\n/// ```\nfn values(map: Map) -> Array;\n\n/// Write an ASCII string to the bytes within an exclusive `range` in the BLOB.\n///\n/// Each ASCII character encodes to one single byte in the BLOB.\n/// Non-ASCII characters are ignored.\n///\n/// * If number of bytes in `range` < length of `string`, extra bytes in `string` are not written.\n/// * If number of bytes in `range` > length of `string`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_ascii(1..5, "hello, world!");\n///\n/// print(b);       // prints "[0068656c6c000000]"\n/// ```\nfn write_ascii(blob: Blob, range: Range<int>, string: String) -> ();\n\n/// Write an ASCII string to the bytes within an inclusive `range` in the BLOB.\n///\n/// Each ASCII character encodes to one single byte in the BLOB.\n/// Non-ASCII characters are ignored.\n///\n/// * If number of bytes in `range` < length of `string`, extra bytes in `string` are not written.\n/// * If number of bytes in `range` > length of `string`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_ascii(1..=5, "hello, world!");\n///\n/// print(b);       // prints "[0068656c6c6f0000]"\n/// ```\nfn write_ascii(blob: Blob, range: RangeInclusive<int>, string: String) -> ();\n\n/// Write an ASCII string to the bytes within an exclusive `range` in the BLOB.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, the BLOB is not modified.\n/// * If `len` ≤ 0, the BLOB is not modified.\n/// * If `start` position + `len` ≥ length of BLOB, only the portion of the BLOB after the `start` position is modified.\n///\n/// * If number of bytes in `range` < length of `string`, extra bytes in `string` are not written.\n/// * If number of bytes in `range` > length of `string`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_ascii(1, 5, "hello, world!");\n///\n/// print(b);       // prints "[0068656c6c6f0000]"\n/// ```\nfn write_ascii(blob: Blob, start: int, len: int, string: String) -> ();\n\n/// Write a `FLOAT` value to the bytes within an exclusive `range` in the BLOB\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, extra bytes in `FLOAT` are not written.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes in `range` are not modified.\nfn write_be(blob: Blob, range: Range<int>, value: float) -> ();\n\n/// Write an `INT` value to the bytes within an exclusive `range` in the BLOB\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, extra bytes in `INT` are not written.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8, 0x42);\n///\n/// b.write_be_int(1..3, 0x99);\n///\n/// print(b);       // prints "[4200004242424242]"\n/// ```\nfn write_be(blob: Blob, range: Range<int>, value: int) -> ();\n\n/// Write a `FLOAT` value to the bytes within an inclusive `range` in the BLOB\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, extra bytes in `FLOAT` are not written.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes in `range` are not modified.\nfn write_be(blob: Blob, range: RangeInclusive<int>, value: float) -> ();\n\n/// Write an `INT` value to the bytes within an inclusive `range` in the BLOB\n/// in big-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, extra bytes in `INT` are not written.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8, 0x42);\n///\n/// b.write_be_int(1..=3, 0x99);\n///\n/// print(b);       // prints "[4200000042424242]"\n/// ```\nfn write_be(blob: Blob, range: RangeInclusive<int>, value: int) -> ();\n\n/// Write a `FLOAT` value to the bytes beginning at the `start` position in the BLOB\n/// in big-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, extra bytes in `FLOAT` are not written.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes in `range` are not modified.\nfn write_be(blob: Blob, start: int, len: int, value: float) -> ();\n\n/// Write an `INT` value to the bytes beginning at the `start` position in the BLOB\n/// in big-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, extra bytes in `INT` are not written.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8, 0x42);\n///\n/// b.write_be_int(1, 3, 0x99);\n///\n/// print(b);       // prints "[4200000042424242]"\n/// ```\nfn write_be(blob: Blob, start: int, len: int, value: int) -> ();\n\n/// Write a `FLOAT` value to the bytes within an exclusive `range` in the BLOB\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, extra bytes in `FLOAT` are not written.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes in `range` are not modified.\nfn write_le(blob: Blob, range: Range<int>, value: float) -> ();\n\n/// Write an `INT` value to the bytes within an exclusive `range` in the BLOB\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, extra bytes in `INT` are not written.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_le_int(1..3, 0x12345678);\n///\n/// print(b);       // prints "[0078560000000000]"\n/// ```\nfn write_le(blob: Blob, range: Range<int>, value: int) -> ();\n\n/// Write a `FLOAT` value to the bytes within an inclusive `range` in the BLOB\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, extra bytes in `FLOAT` are not written.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes in `range` are not modified.\nfn write_le(blob: Blob, range: RangeInclusive<int>, value: float) -> ();\n\n/// Write an `INT` value to the bytes within an inclusive `range` in the BLOB\n/// in little-endian byte order.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, extra bytes in `INT` are not written.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_le_int(1..=3, 0x12345678);\n///\n/// print(b);       // prints "[0078563400000000]"\n/// ```\nfn write_le(blob: Blob, range: RangeInclusive<int>, value: int) -> ();\n\n/// Write a `FLOAT` value to the bytes beginning at the `start` position in the BLOB\n/// in little-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in `range` < number of bytes for `FLOAT`, extra bytes in `FLOAT` are not written.\n/// * If number of bytes in `range` > number of bytes for `FLOAT`, extra bytes in `range` are not modified.\nfn write_le(blob: Blob, start: int, len: int, value: float) -> ();\n\n/// Write an `INT` value to the bytes beginning at the `start` position in the BLOB\n/// in little-endian byte order.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, zero is returned.\n/// * If `len` ≤ 0, zero is returned.\n/// * If `start` position + `len` ≥ length of BLOB, entire portion of the BLOB after the `start` position is parsed.\n///\n/// * If number of bytes in `range` < number of bytes for `INT`, extra bytes in `INT` are not written.\n/// * If number of bytes in `range` > number of bytes for `INT`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_le_int(1, 3, 0x12345678);\n///\n/// print(b);       // prints "[0078563400000000]"\n/// ```\nfn write_le(blob: Blob, start: int, len: int, value: int) -> ();\n\n/// Write a string to the bytes within an exclusive `range` in the BLOB in UTF-8 encoding.\n///\n/// * If number of bytes in `range` < length of `string`, extra bytes in `string` are not written.\n/// * If number of bytes in `range` > length of `string`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_utf8(1..5, "朝には紅顔ありて夕べには白骨となる");\n///\n/// print(b);       // prints "[00e69c9de3000000]"\n/// ```\nfn write_utf8(blob: Blob, range: Range<int>, string: String) -> ();\n\n/// Write a string to the bytes within an inclusive `range` in the BLOB in UTF-8 encoding.\n///\n/// * If number of bytes in `range` < length of `string`, extra bytes in `string` are not written.\n/// * If number of bytes in `range` > length of `string`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_utf8(1..=5, "朝には紅顔ありて夕べには白骨となる");\n///\n/// print(b);       // prints "[00e69c9de3810000]"\n/// ```\nfn write_utf8(blob: Blob, range: RangeInclusive<int>, string: String) -> ();\n\n/// Write a string to the bytes within an inclusive `range` in the BLOB in UTF-8 encoding.\n///\n/// * If `start` < 0, position counts from the end of the BLOB (`-1` is the last byte).\n/// * If `start` < -length of BLOB, position counts from the beginning of the BLOB.\n/// * If `start` ≥ length of BLOB, the BLOB is not modified.\n/// * If `len` ≤ 0, the BLOB is not modified.\n/// * If `start` position + `len` ≥ length of BLOB, only the portion of the BLOB after the `start` position is modified.\n///\n/// * If number of bytes in `range` < length of `string`, extra bytes in `string` are not written.\n/// * If number of bytes in `range` > length of `string`, extra bytes in `range` are not modified.\n///\n/// ```rhai\n/// let b = blob(8);\n///\n/// b.write_utf8(1, 5, "朝には紅顔ありて夕べには白骨となる");\n///\n/// print(b);       // prints "[00e69c9de3810000]"\n/// ```\nfn write_utf8(blob: Blob, start: int, len: int, string: String) -> ();\n\nop |(i128, i128) -> i128;\n\nop |(i16, i16) -> i16;\n\nop |(i32, i32) -> i32;\n\nop |(i8, i8) -> i8;\n\nop |(u128, u128) -> u128;\n\nop |(u16, u16) -> u16;\n\nop |(u32, u32) -> u32;\n\nop |(u64, u64) -> u64;\n\nop |(u8, u8) -> u8;\n'}}]);